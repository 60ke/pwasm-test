var searchIndex = {};
searchIndex["bigint"] = {"doc":"Efficient large, fixed-size big integers and hashes.","items":[[0,"uint","bigint","Big unsigned integer types.",null,null],[3,"U128","bigint::uint","Little-endian large integer type",null,null],[12,"0","","",0,null],[3,"U256","","Little-endian large integer type",null,null],[12,"0","","",1,null],[3,"U512","","Little-endian large integer type",null,null],[12,"0","","",2,null],[4,"FromDecStrErr","","Conversion from decimal string error",null,null],[13,"InvalidCharacter","","Char not from range 0-9",3,null],[13,"InvalidLength","","Value does not fit into type",3,null],[11,"fmt","","",3,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",3,{"inputs":[{"name":"self"},{"name":"fromdecstrerr"}],"output":{"name":"bool"}}],[11,"clone","","",0,{"inputs":[{"name":"self"}],"output":{"name":"u128"}}],[11,"eq","","",0,{"inputs":[{"name":"self"},{"name":"u128"}],"output":{"name":"bool"}}],[11,"ne","","",0,{"inputs":[{"name":"self"},{"name":"u128"}],"output":{"name":"bool"}}],[11,"hash","","",0,null],[11,"from_dec_str","","Convert from a decimal string.",0,{"inputs":[{"name":"str"}],"output":{"generics":["fromdecstrerr"],"name":"result"}}],[11,"low_u32","","Conversion to u32",0,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"low_u64","","Conversion to u64",0,{"inputs":[{"name":"self"}],"output":{"name":"u64"}}],[11,"as_u32","","Conversion to u32 with overflow checking",0,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"as_u64","","Conversion to u64 with overflow checking",0,{"inputs":[{"name":"self"}],"output":{"name":"u64"}}],[11,"is_zero","","Whether this is zero.",0,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"bits","","Return the least number of bits needed to represent the number",0,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"bit","","Return if specific bit is set.",0,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"bool"}}],[11,"leading_zeros","","Returns the number of leading zeros in the binary representation of self.",0,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"trailing_zeros","","Returns the number of leading zeros in the binary representation of self.",0,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"byte","","Return specific byte.",0,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"u8"}}],[11,"to_big_endian","","Write to the slice in big-endian format.",0,null],[11,"to_little_endian","","Write to the slice in little-endian format.",0,null],[11,"to_hex","","Convert to hex string.",0,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[11,"exp10","","Create `10**n` as this type.",0,{"inputs":[{"name":"usize"}],"output":{"name":"self"}}],[11,"zero","","Zero (additive identity) of this type.",0,{"inputs":[],"output":{"name":"self"}}],[11,"one","","One (multiplicative identity) of this type.",0,{"inputs":[],"output":{"name":"self"}}],[11,"max_value","","The maximum value which can be inhabited by this type.",0,{"inputs":[],"output":{"name":"self"}}],[11,"pow","","Fast exponentation by squaring https://en.wikipedia.org/wiki/Exponentiation_by_squaring",0,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[11,"overflowing_pow","","Fast exponentation by squaring https://en.wikipedia.org/wiki/Exponentiation_by_squaring",0,null],[11,"overflowing_add","","Optimized instructions",0,null],[11,"saturating_add","","Addition which saturates at the maximum value.",0,{"inputs":[{"name":"self"},{"name":"u128"}],"output":{"name":"u128"}}],[11,"overflowing_sub","","Subtraction which underflows and returns a flag if it does.",0,null],[11,"saturating_sub","","Subtraction which saturates at zero.",0,{"inputs":[{"name":"self"},{"name":"u128"}],"output":{"name":"u128"}}],[11,"overflowing_mul","","Multiply with overflow, returning a flag if it does.",0,null],[11,"saturating_mul","","Multiplication which saturates at the maximum value..",0,{"inputs":[{"name":"self"},{"name":"u128"}],"output":{"name":"u128"}}],[11,"overflowing_div","","Division with overflow",0,null],[11,"overflowing_rem","","Modulus with overflow.",0,null],[11,"overflowing_neg","","Negation with overflow.",0,null],[11,"from_big_endian","","Converts from big endian representation bytes in memory Can also be used as (&slice).into(), as it is default `From` slice implementation for U256",0,null],[11,"from_little_endian","","Converts from little endian representation bytes in memory",0,null],[11,"default","","",0,{"inputs":[],"output":{"name":"self"}}],[11,"from","","",0,{"inputs":[{"name":"u64"}],"output":{"name":"u128"}}],[11,"from","","",0,{"inputs":[{"name":"u8"}],"output":{"name":"u128"}}],[11,"from","","",0,{"inputs":[{"name":"u16"}],"output":{"name":"u128"}}],[11,"from","","",0,{"inputs":[{"name":"u32"}],"output":{"name":"u128"}}],[11,"from","","",0,{"inputs":[{"name":"usize"}],"output":{"name":"u128"}}],[11,"from","","",0,{"inputs":[{"name":"i64"}],"output":{"name":"u128"}}],[11,"from","","",0,{"inputs":[{"name":"i8"}],"output":{"name":"u128"}}],[11,"from","","",0,{"inputs":[{"name":"i16"}],"output":{"name":"u128"}}],[11,"from","","",0,{"inputs":[{"name":"i32"}],"output":{"name":"u128"}}],[11,"from","","",0,{"inputs":[{"name":"isize"}],"output":{"name":"u128"}}],[11,"from","","",0,null],[11,"from_str","","",0,{"inputs":[{"name":"str"}],"output":{"generics":["u128"],"name":"result"}}],[11,"add","","",0,{"inputs":[{"name":"self"},{"name":"u128"}],"output":{"name":"u128"}}],[11,"sub","","",0,{"inputs":[{"name":"self"},{"name":"u128"}],"output":{"name":"u128"}}],[11,"mul","","",0,{"inputs":[{"name":"self"},{"name":"u128"}],"output":{"name":"u128"}}],[11,"div","","",0,{"inputs":[{"name":"self"},{"name":"u128"}],"output":{"name":"u128"}}],[11,"rem","","",0,{"inputs":[{"name":"self"},{"name":"u128"}],"output":{"name":"u128"}}],[11,"bitand","","",0,{"inputs":[{"name":"self"},{"name":"u128"}],"output":{"name":"u128"}}],[11,"bitxor","","",0,{"inputs":[{"name":"self"},{"name":"u128"}],"output":{"name":"u128"}}],[11,"bitor","","",0,{"inputs":[{"name":"self"},{"name":"u128"}],"output":{"name":"u128"}}],[11,"not","","",0,{"inputs":[{"name":"self"}],"output":{"name":"u128"}}],[11,"shl","","",0,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"u128"}}],[11,"shr","","",0,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"u128"}}],[11,"cmp","","",0,{"inputs":[{"name":"self"},{"name":"u128"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",0,{"inputs":[{"name":"self"},{"name":"u128"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from","","",0,{"inputs":[{"name":"str"}],"output":{"name":"self"}}],[11,"clone","","",1,{"inputs":[{"name":"self"}],"output":{"name":"u256"}}],[11,"eq","","",1,{"inputs":[{"name":"self"},{"name":"u256"}],"output":{"name":"bool"}}],[11,"ne","","",1,{"inputs":[{"name":"self"},{"name":"u256"}],"output":{"name":"bool"}}],[11,"hash","","",1,null],[11,"from_dec_str","","Convert from a decimal string.",1,{"inputs":[{"name":"str"}],"output":{"generics":["fromdecstrerr"],"name":"result"}}],[11,"low_u32","","Conversion to u32",1,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"low_u64","","Conversion to u64",1,{"inputs":[{"name":"self"}],"output":{"name":"u64"}}],[11,"as_u32","","Conversion to u32 with overflow checking",1,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"as_u64","","Conversion to u64 with overflow checking",1,{"inputs":[{"name":"self"}],"output":{"name":"u64"}}],[11,"is_zero","","Whether this is zero.",1,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"bits","","Return the least number of bits needed to represent the number",1,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"bit","","Return if specific bit is set.",1,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"bool"}}],[11,"leading_zeros","","Returns the number of leading zeros in the binary representation of self.",1,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"trailing_zeros","","Returns the number of leading zeros in the binary representation of self.",1,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"byte","","Return specific byte.",1,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"u8"}}],[11,"to_big_endian","","Write to the slice in big-endian format.",1,null],[11,"to_little_endian","","Write to the slice in little-endian format.",1,null],[11,"to_hex","","Convert to hex string.",1,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[11,"exp10","","Create `10**n` as this type.",1,{"inputs":[{"name":"usize"}],"output":{"name":"self"}}],[11,"zero","","Zero (additive identity) of this type.",1,{"inputs":[],"output":{"name":"self"}}],[11,"one","","One (multiplicative identity) of this type.",1,{"inputs":[],"output":{"name":"self"}}],[11,"max_value","","The maximum value which can be inhabited by this type.",1,{"inputs":[],"output":{"name":"self"}}],[11,"pow","","Fast exponentation by squaring https://en.wikipedia.org/wiki/Exponentiation_by_squaring",1,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[11,"overflowing_pow","","Fast exponentation by squaring https://en.wikipedia.org/wiki/Exponentiation_by_squaring",1,null],[11,"overflowing_add","","Optimized instructions",1,null],[11,"saturating_add","","Addition which saturates at the maximum value.",1,{"inputs":[{"name":"self"},{"name":"u256"}],"output":{"name":"u256"}}],[11,"overflowing_sub","","Subtraction which underflows and returns a flag if it does.",1,null],[11,"saturating_sub","","Subtraction which saturates at zero.",1,{"inputs":[{"name":"self"},{"name":"u256"}],"output":{"name":"u256"}}],[11,"overflowing_mul","","Multiply with overflow, returning a flag if it does.",1,null],[11,"saturating_mul","","Multiplication which saturates at the maximum value..",1,{"inputs":[{"name":"self"},{"name":"u256"}],"output":{"name":"u256"}}],[11,"overflowing_div","","Division with overflow",1,null],[11,"overflowing_rem","","Modulus with overflow.",1,null],[11,"overflowing_neg","","Negation with overflow.",1,null],[11,"from_big_endian","","Converts from big endian representation bytes in memory Can also be used as (&slice).into(), as it is default `From` slice implementation for U256",1,null],[11,"from_little_endian","","Converts from little endian representation bytes in memory",1,null],[11,"default","","",1,{"inputs":[],"output":{"name":"self"}}],[11,"from","","",1,{"inputs":[{"name":"u64"}],"output":{"name":"u256"}}],[11,"from","","",1,{"inputs":[{"name":"u8"}],"output":{"name":"u256"}}],[11,"from","","",1,{"inputs":[{"name":"u16"}],"output":{"name":"u256"}}],[11,"from","","",1,{"inputs":[{"name":"u32"}],"output":{"name":"u256"}}],[11,"from","","",1,{"inputs":[{"name":"usize"}],"output":{"name":"u256"}}],[11,"from","","",1,{"inputs":[{"name":"i64"}],"output":{"name":"u256"}}],[11,"from","","",1,{"inputs":[{"name":"i8"}],"output":{"name":"u256"}}],[11,"from","","",1,{"inputs":[{"name":"i16"}],"output":{"name":"u256"}}],[11,"from","","",1,{"inputs":[{"name":"i32"}],"output":{"name":"u256"}}],[11,"from","","",1,{"inputs":[{"name":"isize"}],"output":{"name":"u256"}}],[11,"from","","",1,null],[11,"from_str","","",1,{"inputs":[{"name":"str"}],"output":{"generics":["u256"],"name":"result"}}],[11,"add","","",1,{"inputs":[{"name":"self"},{"name":"u256"}],"output":{"name":"u256"}}],[11,"sub","","",1,{"inputs":[{"name":"self"},{"name":"u256"}],"output":{"name":"u256"}}],[11,"mul","","",1,{"inputs":[{"name":"self"},{"name":"u256"}],"output":{"name":"u256"}}],[11,"div","","",1,{"inputs":[{"name":"self"},{"name":"u256"}],"output":{"name":"u256"}}],[11,"rem","","",1,{"inputs":[{"name":"self"},{"name":"u256"}],"output":{"name":"u256"}}],[11,"bitand","","",1,{"inputs":[{"name":"self"},{"name":"u256"}],"output":{"name":"u256"}}],[11,"bitxor","","",1,{"inputs":[{"name":"self"},{"name":"u256"}],"output":{"name":"u256"}}],[11,"bitor","","",1,{"inputs":[{"name":"self"},{"name":"u256"}],"output":{"name":"u256"}}],[11,"not","","",1,{"inputs":[{"name":"self"}],"output":{"name":"u256"}}],[11,"shl","","",1,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"u256"}}],[11,"shr","","",1,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"u256"}}],[11,"cmp","","",1,{"inputs":[{"name":"self"},{"name":"u256"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",1,{"inputs":[{"name":"self"},{"name":"u256"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from","","",1,{"inputs":[{"name":"str"}],"output":{"name":"self"}}],[11,"clone","","",2,{"inputs":[{"name":"self"}],"output":{"name":"u512"}}],[11,"eq","","",2,{"inputs":[{"name":"self"},{"name":"u512"}],"output":{"name":"bool"}}],[11,"ne","","",2,{"inputs":[{"name":"self"},{"name":"u512"}],"output":{"name":"bool"}}],[11,"hash","","",2,null],[11,"from_dec_str","","Convert from a decimal string.",2,{"inputs":[{"name":"str"}],"output":{"generics":["fromdecstrerr"],"name":"result"}}],[11,"low_u32","","Conversion to u32",2,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"low_u64","","Conversion to u64",2,{"inputs":[{"name":"self"}],"output":{"name":"u64"}}],[11,"as_u32","","Conversion to u32 with overflow checking",2,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"as_u64","","Conversion to u64 with overflow checking",2,{"inputs":[{"name":"self"}],"output":{"name":"u64"}}],[11,"is_zero","","Whether this is zero.",2,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"bits","","Return the least number of bits needed to represent the number",2,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"bit","","Return if specific bit is set.",2,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"bool"}}],[11,"leading_zeros","","Returns the number of leading zeros in the binary representation of self.",2,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"trailing_zeros","","Returns the number of leading zeros in the binary representation of self.",2,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"byte","","Return specific byte.",2,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"u8"}}],[11,"to_big_endian","","Write to the slice in big-endian format.",2,null],[11,"to_little_endian","","Write to the slice in little-endian format.",2,null],[11,"to_hex","","Convert to hex string.",2,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[11,"exp10","","Create `10**n` as this type.",2,{"inputs":[{"name":"usize"}],"output":{"name":"self"}}],[11,"zero","","Zero (additive identity) of this type.",2,{"inputs":[],"output":{"name":"self"}}],[11,"one","","One (multiplicative identity) of this type.",2,{"inputs":[],"output":{"name":"self"}}],[11,"max_value","","The maximum value which can be inhabited by this type.",2,{"inputs":[],"output":{"name":"self"}}],[11,"pow","","Fast exponentation by squaring https://en.wikipedia.org/wiki/Exponentiation_by_squaring",2,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[11,"overflowing_pow","","Fast exponentation by squaring https://en.wikipedia.org/wiki/Exponentiation_by_squaring",2,null],[11,"overflowing_add","","Optimized instructions",2,null],[11,"saturating_add","","Addition which saturates at the maximum value.",2,{"inputs":[{"name":"self"},{"name":"u512"}],"output":{"name":"u512"}}],[11,"overflowing_sub","","Subtraction which underflows and returns a flag if it does.",2,null],[11,"saturating_sub","","Subtraction which saturates at zero.",2,{"inputs":[{"name":"self"},{"name":"u512"}],"output":{"name":"u512"}}],[11,"overflowing_mul","","Multiply with overflow, returning a flag if it does.",2,null],[11,"saturating_mul","","Multiplication which saturates at the maximum value..",2,{"inputs":[{"name":"self"},{"name":"u512"}],"output":{"name":"u512"}}],[11,"overflowing_div","","Division with overflow",2,null],[11,"overflowing_rem","","Modulus with overflow.",2,null],[11,"overflowing_neg","","Negation with overflow.",2,null],[11,"from_big_endian","","Converts from big endian representation bytes in memory Can also be used as (&slice).into(), as it is default `From` slice implementation for U256",2,null],[11,"from_little_endian","","Converts from little endian representation bytes in memory",2,null],[11,"default","","",2,{"inputs":[],"output":{"name":"self"}}],[11,"from","","",2,{"inputs":[{"name":"u64"}],"output":{"name":"u512"}}],[11,"from","","",2,{"inputs":[{"name":"u8"}],"output":{"name":"u512"}}],[11,"from","","",2,{"inputs":[{"name":"u16"}],"output":{"name":"u512"}}],[11,"from","","",2,{"inputs":[{"name":"u32"}],"output":{"name":"u512"}}],[11,"from","","",2,{"inputs":[{"name":"usize"}],"output":{"name":"u512"}}],[11,"from","","",2,{"inputs":[{"name":"i64"}],"output":{"name":"u512"}}],[11,"from","","",2,{"inputs":[{"name":"i8"}],"output":{"name":"u512"}}],[11,"from","","",2,{"inputs":[{"name":"i16"}],"output":{"name":"u512"}}],[11,"from","","",2,{"inputs":[{"name":"i32"}],"output":{"name":"u512"}}],[11,"from","","",2,{"inputs":[{"name":"isize"}],"output":{"name":"u512"}}],[11,"from","","",2,null],[11,"from_str","","",2,{"inputs":[{"name":"str"}],"output":{"generics":["u512"],"name":"result"}}],[11,"add","","",2,{"inputs":[{"name":"self"},{"name":"u512"}],"output":{"name":"u512"}}],[11,"sub","","",2,{"inputs":[{"name":"self"},{"name":"u512"}],"output":{"name":"u512"}}],[11,"mul","","",2,{"inputs":[{"name":"self"},{"name":"u512"}],"output":{"name":"u512"}}],[11,"div","","",2,{"inputs":[{"name":"self"},{"name":"u512"}],"output":{"name":"u512"}}],[11,"rem","","",2,{"inputs":[{"name":"self"},{"name":"u512"}],"output":{"name":"u512"}}],[11,"bitand","","",2,{"inputs":[{"name":"self"},{"name":"u512"}],"output":{"name":"u512"}}],[11,"bitxor","","",2,{"inputs":[{"name":"self"},{"name":"u512"}],"output":{"name":"u512"}}],[11,"bitor","","",2,{"inputs":[{"name":"self"},{"name":"u512"}],"output":{"name":"u512"}}],[11,"not","","",2,{"inputs":[{"name":"self"}],"output":{"name":"u512"}}],[11,"shl","","",2,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"u512"}}],[11,"shr","","",2,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"u512"}}],[11,"cmp","","",2,{"inputs":[{"name":"self"},{"name":"u512"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",2,{"inputs":[{"name":"self"},{"name":"u512"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"fmt","","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from","","",2,{"inputs":[{"name":"str"}],"output":{"name":"self"}}],[11,"full_mul","","Multiplies two 256-bit integers to produce full 512-bit integer No overflow possible",1,{"inputs":[{"name":"self"},{"name":"u256"}],"output":{"name":"u512"}}],[11,"from","","",2,{"inputs":[{"name":"u256"}],"output":{"name":"u512"}}],[11,"from","","",1,{"inputs":[{"name":"u512"}],"output":{"name":"u256"}}],[11,"from","","",2,{"inputs":[{"name":"u256"}],"output":{"name":"u512"}}],[11,"from","","",1,{"inputs":[{"name":"u512"}],"output":{"name":"u256"}}],[11,"from","","",0,{"inputs":[{"name":"u256"}],"output":{"name":"u128"}}],[11,"from","","",0,{"inputs":[{"name":"u512"}],"output":{"name":"u128"}}],[11,"from","","",2,{"inputs":[{"name":"u128"}],"output":{"name":"u512"}}],[11,"from","","",1,{"inputs":[{"name":"u128"}],"output":{"name":"u256"}}],[11,"from","","",1,null],[11,"from","","",1,null],[11,"from","","",0,null],[11,"from","","",0,null],[11,"from","","",2,null],[11,"from","","",2,null]],"paths":[[3,"U128"],[3,"U256"],[3,"U512"],[4,"FromDecStrErr"]]};
searchIndex["byteorder"] = {"doc":"This crate provides convenience methods for encoding and decoding numbers in either big-endian or little-endian order.","items":[[4,"BigEndian","byteorder","Defines big-endian serialization.",null,null],[4,"LittleEndian","","Defines little-endian serialization.",null,null],[6,"BE","","A type alias for `BigEndian`.",null,null],[6,"LE","","A type alias for `LittleEndian`.",null,null],[6,"NetworkEndian","","Defines network byte order serialization.",null,null],[6,"NativeEndian","","Defines system native-endian serialization.",null,null],[8,"ReadBytesExt","","Extends `Read` with methods for reading numbers. (For `std::io`.)",null,null],[11,"read_u8","","Reads an unsigned 8 bit integer from the underlying reader.",0,{"inputs":[{"name":"self"}],"output":{"generics":["u8"],"name":"result"}}],[11,"read_i8","","Reads a signed 8 bit integer from the underlying reader.",0,{"inputs":[{"name":"self"}],"output":{"generics":["i8"],"name":"result"}}],[11,"read_u16","","Reads an unsigned 16 bit integer from the underlying reader.",0,{"inputs":[{"name":"self"}],"output":{"generics":["u16"],"name":"result"}}],[11,"read_i16","","Reads a signed 16 bit integer from the underlying reader.",0,{"inputs":[{"name":"self"}],"output":{"generics":["i16"],"name":"result"}}],[11,"read_u24","","Reads an unsigned 24 bit integer from the underlying reader.",0,{"inputs":[{"name":"self"}],"output":{"generics":["u32"],"name":"result"}}],[11,"read_i24","","Reads a signed 24 bit integer from the underlying reader.",0,{"inputs":[{"name":"self"}],"output":{"generics":["i32"],"name":"result"}}],[11,"read_u32","","Reads an unsigned 32 bit integer from the underlying reader.",0,{"inputs":[{"name":"self"}],"output":{"generics":["u32"],"name":"result"}}],[11,"read_i32","","Reads a signed 32 bit integer from the underlying reader.",0,{"inputs":[{"name":"self"}],"output":{"generics":["i32"],"name":"result"}}],[11,"read_u64","","Reads an unsigned 64 bit integer from the underlying reader.",0,{"inputs":[{"name":"self"}],"output":{"generics":["u64"],"name":"result"}}],[11,"read_i64","","Reads a signed 64 bit integer from the underlying reader.",0,{"inputs":[{"name":"self"}],"output":{"generics":["i64"],"name":"result"}}],[11,"read_uint","","Reads an unsigned n-bytes integer from the underlying reader.",0,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"generics":["u64"],"name":"result"}}],[11,"read_int","","Reads a signed n-bytes integer from the underlying reader.",0,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"generics":["i64"],"name":"result"}}],[11,"read_f32","","Reads a IEEE754 single-precision (4 bytes) floating point number from the underlying reader.",0,{"inputs":[{"name":"self"}],"output":{"generics":["f32"],"name":"result"}}],[11,"read_f64","","Reads a IEEE754 double-precision (8 bytes) floating point number from the underlying reader.",0,{"inputs":[{"name":"self"}],"output":{"generics":["f64"],"name":"result"}}],[11,"read_u16_into","","Reads a sequence of unsigned 16 bit integers from the underlying reader.",0,null],[11,"read_u32_into","","Reads a sequence of unsigned 32 bit integers from the underlying reader.",0,null],[11,"read_u64_into","","Reads a sequence of unsigned 64 bit integers from the underlying reader.",0,null],[11,"read_i16_into","","Reads a sequence of signed 16 bit integers from the underlying reader.",0,null],[11,"read_i32_into","","Reads a sequence of signed 32 bit integers from the underlying reader.",0,null],[11,"read_i64_into","","Reads a sequence of signed 64 bit integers from the underlying reader.",0,null],[11,"read_f32_into","","Reads a sequence of IEEE754 single-precision (4 bytes) floating point numbers from the underlying reader.",0,null],[11,"read_f32_into_unchecked","","DEPRECATED.",0,null],[11,"read_f64_into","","Reads a sequence of IEEE754 double-precision (8 bytes) floating point numbers from the underlying reader.",0,null],[11,"read_f64_into_unchecked","","DEPRECATED.",0,null],[8,"WriteBytesExt","","Extends `Write` with methods for writing numbers. (For `std::io`.)",null,null],[11,"write_u8","","Writes an unsigned 8 bit integer to the underlying writer.",1,{"inputs":[{"name":"self"},{"name":"u8"}],"output":{"name":"result"}}],[11,"write_i8","","Writes a signed 8 bit integer to the underlying writer.",1,{"inputs":[{"name":"self"},{"name":"i8"}],"output":{"name":"result"}}],[11,"write_u16","","Writes an unsigned 16 bit integer to the underlying writer.",1,{"inputs":[{"name":"self"},{"name":"u16"}],"output":{"name":"result"}}],[11,"write_i16","","Writes a signed 16 bit integer to the underlying writer.",1,{"inputs":[{"name":"self"},{"name":"i16"}],"output":{"name":"result"}}],[11,"write_u24","","Writes an unsigned 24 bit integer to the underlying writer.",1,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"result"}}],[11,"write_i24","","Writes a signed 24 bit integer to the underlying writer.",1,{"inputs":[{"name":"self"},{"name":"i32"}],"output":{"name":"result"}}],[11,"write_u32","","Writes an unsigned 32 bit integer to the underlying writer.",1,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"result"}}],[11,"write_i32","","Writes a signed 32 bit integer to the underlying writer.",1,{"inputs":[{"name":"self"},{"name":"i32"}],"output":{"name":"result"}}],[11,"write_u64","","Writes an unsigned 64 bit integer to the underlying writer.",1,{"inputs":[{"name":"self"},{"name":"u64"}],"output":{"name":"result"}}],[11,"write_i64","","Writes a signed 64 bit integer to the underlying writer.",1,{"inputs":[{"name":"self"},{"name":"i64"}],"output":{"name":"result"}}],[11,"write_uint","","Writes an unsigned n-bytes integer to the underlying writer.",1,{"inputs":[{"name":"self"},{"name":"u64"},{"name":"usize"}],"output":{"name":"result"}}],[11,"write_int","","Writes a signed n-bytes integer to the underlying writer.",1,{"inputs":[{"name":"self"},{"name":"i64"},{"name":"usize"}],"output":{"name":"result"}}],[11,"write_f32","","Writes a IEEE754 single-precision (4 bytes) floating point number to the underlying writer.",1,{"inputs":[{"name":"self"},{"name":"f32"}],"output":{"name":"result"}}],[11,"write_f64","","Writes a IEEE754 double-precision (8 bytes) floating point number to the underlying writer.",1,{"inputs":[{"name":"self"},{"name":"f64"}],"output":{"name":"result"}}],[8,"ByteOrder","","ByteOrder describes types that can serialize integers as bytes.",null,null],[10,"read_u16","","Reads an unsigned 16 bit integer from `buf`.",2,null],[11,"read_u24","","Reads an unsigned 24 bit integer from `buf`, stored in u32.",2,null],[10,"read_u32","","Reads an unsigned 32 bit integer from `buf`.",2,null],[10,"read_u64","","Reads an unsigned 64 bit integer from `buf`.",2,null],[10,"read_uint","","Reads an unsigned n-bytes integer from `buf`.",2,null],[10,"write_u16","","Writes an unsigned 16 bit integer `n` to `buf`.",2,null],[11,"write_u24","","Writes an unsigned 24 bit integer `n` to `buf`, stored in u32.",2,null],[10,"write_u32","","Writes an unsigned 32 bit integer `n` to `buf`.",2,null],[10,"write_u64","","Writes an unsigned 64 bit integer `n` to `buf`.",2,null],[10,"write_uint","","Writes an unsigned integer `n` to `buf` using only `nbytes`.",2,null],[11,"read_i16","","Reads a signed 16 bit integer from `buf`.",2,null],[11,"read_i24","","Reads a signed 24 bit integer from `buf`, stored in i32.",2,null],[11,"read_i32","","Reads a signed 32 bit integer from `buf`.",2,null],[11,"read_i64","","Reads a signed 64 bit integer from `buf`.",2,null],[11,"read_int","","Reads a signed n-bytes integer from `buf`.",2,null],[11,"read_f32","","Reads a IEEE754 single-precision (4 bytes) floating point number.",2,null],[11,"read_f64","","Reads a IEEE754 double-precision (8 bytes) floating point number.",2,null],[11,"write_i16","","Writes a signed 16 bit integer `n` to `buf`.",2,null],[11,"write_i24","","Writes a signed 24 bit integer `n` to `buf`, stored in i32.",2,null],[11,"write_i32","","Writes a signed 32 bit integer `n` to `buf`.",2,null],[11,"write_i64","","Writes a signed 64 bit integer `n` to `buf`.",2,null],[11,"write_int","","Writes a signed integer `n` to `buf` using only `nbytes`.",2,null],[11,"write_f32","","Writes a IEEE754 single-precision (4 bytes) floating point number.",2,null],[11,"write_f64","","Writes a IEEE754 double-precision (8 bytes) floating point number.",2,null],[10,"read_u16_into","","Reads unsigned 16 bit integers from `src` into `dst`.",2,null],[10,"read_u32_into","","Reads unsigned 32 bit integers from `src` into `dst`.",2,null],[10,"read_u64_into","","Reads unsigned 64 bit integers from `src` into `dst`.",2,null],[11,"read_i16_into","","Reads signed 16 bit integers from `src` to `dst`.",2,null],[11,"read_i32_into","","Reads signed 32 bit integers from `src` into `dst`.",2,null],[11,"read_i64_into","","Reads signed 64 bit integers from `src` into `dst`.",2,null],[11,"read_f32_into_unchecked","","Reads IEEE754 single-precision (4 bytes) floating point numbers from `src` into `dst`.",2,null],[11,"read_f64_into_unchecked","","Reads IEEE754 single-precision (4 bytes) floating point numbers from `src` into `dst`.",2,null],[10,"write_u16_into","","Writes unsigned 16 bit integers from `src` into `dst`.",2,null],[10,"write_u32_into","","Writes unsigned 32 bit integers from `src` into `dst`.",2,null],[10,"write_u64_into","","Writes unsigned 64 bit integers from `src` into `dst`.",2,null],[11,"write_i16_into","","Writes signed 16 bit integers from `src` into `dst`.",2,null],[11,"write_i32_into","","Writes signed 32 bit integers from `src` into `dst`.",2,null],[11,"write_i64_into","","Writes signed 64 bit integers from `src` into `dst`.",2,null],[11,"write_f32_into","","Writes IEEE754 single-precision (4 bytes) floating point numbers from `src` into `dst`.",2,null],[11,"write_f64_into","","Writes IEEE754 double-precision (8 bytes) floating point numbers from `src` into `dst`.",2,null],[10,"from_slice_u16","","Converts the given slice of unsigned 16 bit integers to a particular endianness.",2,null],[10,"from_slice_u32","","Converts the given slice of unsigned 32 bit integers to a particular endianness.",2,null],[10,"from_slice_u64","","Converts the given slice of unsigned 64 bit integers to a particular endianness.",2,null],[11,"from_slice_i16","","Converts the given slice of signed 16 bit integers to a particular endianness.",2,null],[11,"from_slice_i32","","Converts the given slice of signed 32 bit integers to a particular endianness.",2,null],[11,"from_slice_i64","","Converts the given slice of signed 64 bit integers to a particular endianness.",2,null],[10,"from_slice_f32","","Converts the given slice of IEEE754 single-precision (4 bytes) floating point numbers to a particular endianness.",2,null],[10,"from_slice_f64","","Converts the given slice of IEEE754 double-precision (8 bytes) floating point numbers to a particular endianness.",2,null],[11,"clone","","",3,{"inputs":[{"name":"self"}],"output":{"name":"bigendian"}}],[11,"fmt","","",3,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",3,null],[11,"cmp","","",3,{"inputs":[{"name":"self"},{"name":"bigendian"}],"output":{"name":"ordering"}}],[11,"eq","","",3,{"inputs":[{"name":"self"},{"name":"bigendian"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",3,{"inputs":[{"name":"self"},{"name":"bigendian"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"default","","",3,{"inputs":[],"output":{"name":"bigendian"}}],[11,"clone","","",4,{"inputs":[{"name":"self"}],"output":{"name":"littleendian"}}],[11,"fmt","","",4,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",4,null],[11,"cmp","","",4,{"inputs":[{"name":"self"},{"name":"littleendian"}],"output":{"name":"ordering"}}],[11,"eq","","",4,{"inputs":[{"name":"self"},{"name":"littleendian"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",4,{"inputs":[{"name":"self"},{"name":"littleendian"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"default","","",4,{"inputs":[],"output":{"name":"littleendian"}}],[11,"read_u16","","",3,null],[11,"read_u32","","",3,null],[11,"read_u64","","",3,null],[11,"read_uint","","",3,null],[11,"write_u16","","",3,null],[11,"write_u32","","",3,null],[11,"write_u64","","",3,null],[11,"write_uint","","",3,null],[11,"read_u16_into","","",3,null],[11,"read_u32_into","","",3,null],[11,"read_u64_into","","",3,null],[11,"write_u16_into","","",3,null],[11,"write_u32_into","","",3,null],[11,"write_u64_into","","",3,null],[11,"from_slice_u16","","",3,null],[11,"from_slice_u32","","",3,null],[11,"from_slice_u64","","",3,null],[11,"from_slice_f32","","",3,null],[11,"from_slice_f64","","",3,null],[11,"read_u16","","",4,null],[11,"read_u32","","",4,null],[11,"read_u64","","",4,null],[11,"read_uint","","",4,null],[11,"write_u16","","",4,null],[11,"write_u32","","",4,null],[11,"write_u64","","",4,null],[11,"write_uint","","",4,null],[11,"read_u16_into","","",4,null],[11,"read_u32_into","","",4,null],[11,"read_u64_into","","",4,null],[11,"write_u16_into","","",4,null],[11,"write_u32_into","","",4,null],[11,"write_u64_into","","",4,null],[11,"from_slice_u16","","",4,null],[11,"from_slice_u32","","",4,null],[11,"from_slice_u64","","",4,null],[11,"from_slice_f32","","",4,null],[11,"from_slice_f64","","",4,null],[11,"read_u8","","Reads an unsigned 8 bit integer from the underlying reader.",0,{"inputs":[{"name":"self"}],"output":{"generics":["u8"],"name":"result"}}],[11,"read_i8","","Reads a signed 8 bit integer from the underlying reader.",0,{"inputs":[{"name":"self"}],"output":{"generics":["i8"],"name":"result"}}],[11,"read_u16","","Reads an unsigned 16 bit integer from the underlying reader.",0,{"inputs":[{"name":"self"}],"output":{"generics":["u16"],"name":"result"}}],[11,"read_i16","","Reads a signed 16 bit integer from the underlying reader.",0,{"inputs":[{"name":"self"}],"output":{"generics":["i16"],"name":"result"}}],[11,"read_u24","","Reads an unsigned 24 bit integer from the underlying reader.",0,{"inputs":[{"name":"self"}],"output":{"generics":["u32"],"name":"result"}}],[11,"read_i24","","Reads a signed 24 bit integer from the underlying reader.",0,{"inputs":[{"name":"self"}],"output":{"generics":["i32"],"name":"result"}}],[11,"read_u32","","Reads an unsigned 32 bit integer from the underlying reader.",0,{"inputs":[{"name":"self"}],"output":{"generics":["u32"],"name":"result"}}],[11,"read_i32","","Reads a signed 32 bit integer from the underlying reader.",0,{"inputs":[{"name":"self"}],"output":{"generics":["i32"],"name":"result"}}],[11,"read_u64","","Reads an unsigned 64 bit integer from the underlying reader.",0,{"inputs":[{"name":"self"}],"output":{"generics":["u64"],"name":"result"}}],[11,"read_i64","","Reads a signed 64 bit integer from the underlying reader.",0,{"inputs":[{"name":"self"}],"output":{"generics":["i64"],"name":"result"}}],[11,"read_uint","","Reads an unsigned n-bytes integer from the underlying reader.",0,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"generics":["u64"],"name":"result"}}],[11,"read_int","","Reads a signed n-bytes integer from the underlying reader.",0,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"generics":["i64"],"name":"result"}}],[11,"read_f32","","Reads a IEEE754 single-precision (4 bytes) floating point number from the underlying reader.",0,{"inputs":[{"name":"self"}],"output":{"generics":["f32"],"name":"result"}}],[11,"read_f64","","Reads a IEEE754 double-precision (8 bytes) floating point number from the underlying reader.",0,{"inputs":[{"name":"self"}],"output":{"generics":["f64"],"name":"result"}}],[11,"read_u16_into","","Reads a sequence of unsigned 16 bit integers from the underlying reader.",0,null],[11,"read_u32_into","","Reads a sequence of unsigned 32 bit integers from the underlying reader.",0,null],[11,"read_u64_into","","Reads a sequence of unsigned 64 bit integers from the underlying reader.",0,null],[11,"read_i16_into","","Reads a sequence of signed 16 bit integers from the underlying reader.",0,null],[11,"read_i32_into","","Reads a sequence of signed 32 bit integers from the underlying reader.",0,null],[11,"read_i64_into","","Reads a sequence of signed 64 bit integers from the underlying reader.",0,null],[11,"read_f32_into","","Reads a sequence of IEEE754 single-precision (4 bytes) floating point numbers from the underlying reader.",0,null],[11,"read_f32_into_unchecked","","DEPRECATED.",0,null],[11,"read_f64_into","","Reads a sequence of IEEE754 double-precision (8 bytes) floating point numbers from the underlying reader.",0,null],[11,"read_f64_into_unchecked","","DEPRECATED.",0,null],[11,"write_u8","","Writes an unsigned 8 bit integer to the underlying writer.",1,{"inputs":[{"name":"self"},{"name":"u8"}],"output":{"name":"result"}}],[11,"write_i8","","Writes a signed 8 bit integer to the underlying writer.",1,{"inputs":[{"name":"self"},{"name":"i8"}],"output":{"name":"result"}}],[11,"write_u16","","Writes an unsigned 16 bit integer to the underlying writer.",1,{"inputs":[{"name":"self"},{"name":"u16"}],"output":{"name":"result"}}],[11,"write_i16","","Writes a signed 16 bit integer to the underlying writer.",1,{"inputs":[{"name":"self"},{"name":"i16"}],"output":{"name":"result"}}],[11,"write_u24","","Writes an unsigned 24 bit integer to the underlying writer.",1,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"result"}}],[11,"write_i24","","Writes a signed 24 bit integer to the underlying writer.",1,{"inputs":[{"name":"self"},{"name":"i32"}],"output":{"name":"result"}}],[11,"write_u32","","Writes an unsigned 32 bit integer to the underlying writer.",1,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"result"}}],[11,"write_i32","","Writes a signed 32 bit integer to the underlying writer.",1,{"inputs":[{"name":"self"},{"name":"i32"}],"output":{"name":"result"}}],[11,"write_u64","","Writes an unsigned 64 bit integer to the underlying writer.",1,{"inputs":[{"name":"self"},{"name":"u64"}],"output":{"name":"result"}}],[11,"write_i64","","Writes a signed 64 bit integer to the underlying writer.",1,{"inputs":[{"name":"self"},{"name":"i64"}],"output":{"name":"result"}}],[11,"write_uint","","Writes an unsigned n-bytes integer to the underlying writer.",1,{"inputs":[{"name":"self"},{"name":"u64"},{"name":"usize"}],"output":{"name":"result"}}],[11,"write_int","","Writes a signed n-bytes integer to the underlying writer.",1,{"inputs":[{"name":"self"},{"name":"i64"},{"name":"usize"}],"output":{"name":"result"}}],[11,"write_f32","","Writes a IEEE754 single-precision (4 bytes) floating point number to the underlying writer.",1,{"inputs":[{"name":"self"},{"name":"f32"}],"output":{"name":"result"}}],[11,"write_f64","","Writes a IEEE754 double-precision (8 bytes) floating point number to the underlying writer.",1,{"inputs":[{"name":"self"},{"name":"f64"}],"output":{"name":"result"}}]],"paths":[[8,"ReadBytesExt"],[8,"WriteBytesExt"],[8,"ByteOrder"],[4,"BigEndian"],[4,"LittleEndian"]]};
searchIndex["cfg_if"] = {"doc":"A macro for defining #[cfg] if-else statements.","items":[[14,"cfg_if","cfg_if","",null,null]],"paths":[]};
searchIndex["crunchy"] = {"doc":"The crunchy unroller - deterministically unroll constant loops. For number \"crunching\".","items":[[14,"unroll","crunchy","Unroll the given for loop",null,null]],"paths":[]};
searchIndex["parity_hash"] = {"doc":"","items":[[3,"H32","parity_hash","Unformatted binary data of fixed length.",null,null],[12,"0","","",0,null],[3,"H64","","Unformatted binary data of fixed length.",null,null],[12,"0","","",1,null],[3,"H128","","Unformatted binary data of fixed length.",null,null],[12,"0","","",2,null],[3,"H160","","Unformatted binary data of fixed length.",null,null],[12,"0","","",3,null],[3,"H256","","Unformatted binary data of fixed length.",null,null],[12,"0","","",4,null],[3,"H264","","Unformatted binary data of fixed length.",null,null],[12,"0","","",5,null],[3,"H512","","Unformatted binary data of fixed length.",null,null],[12,"0","","",6,null],[3,"H520","","Unformatted binary data of fixed length.",null,null],[12,"0","","",7,null],[3,"H1024","","Unformatted binary data of fixed length.",null,null],[12,"0","","",8,null],[3,"H2048","","Unformatted binary data of fixed length.",null,null],[12,"0","","",9,null],[6,"Address","","",null,null],[11,"from","","",4,{"inputs":[{"name":"u256"}],"output":{"name":"h256"}}],[11,"from","","",4,{"inputs":[{"name":"u256"}],"output":{"name":"h256"}}],[11,"from","","",3,{"inputs":[{"name":"h256"}],"output":{"name":"h160"}}],[11,"from","","",1,{"inputs":[{"name":"h256"}],"output":{"name":"h64"}}],[11,"from","","",4,{"inputs":[{"name":"h160"}],"output":{"name":"h256"}}],[11,"from","","",4,{"inputs":[{"name":"h160"}],"output":{"name":"h256"}}],[11,"from","","",0,null],[11,"deref","","",0,null],[11,"as_ref","","",0,null],[11,"as_mut","","",0,null],[11,"deref_mut","","",0,null],[11,"new","","Create a new, zero-initialised, instance.",0,{"inputs":[],"output":{"name":"h32"}}],[11,"zero","","Synonym for `new()`. Prefer to new as it's more readable.",0,{"inputs":[],"output":{"name":"h32"}}],[11,"len","","Get the size of this object in bytes.",0,{"inputs":[],"output":{"name":"usize"}}],[11,"as_ptr","","Returns a constant raw pointer to the value",0,null],[11,"as_mut_ptr","","Returns a mutable raw pointer to the value",0,null],[11,"clone_from_slice","","Assign self to be of the same value as a slice of bytes of length `len()`.",0,null],[11,"from_slice","","Convert a slice of bytes of length `len()` to an instance of this type.",0,null],[11,"copy_to","","Copy the data of this object into some mutable slice of length `len()`.",0,null],[11,"contains","","Returns `true` if all bits set in `b` are also set in `self`.",0,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"bool"}}],[11,"is_zero","","Returns `true` if no bits are set.",0,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"low_u64","","Returns the lowest 8 bytes interpreted as a BigEndian integer.",0,{"inputs":[{"name":"self"}],"output":{"name":"u64"}}],[11,"from_str","","",0,{"inputs":[{"name":"str"}],"output":{"generics":["h32","fromhexerror"],"name":"result"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",0,{"inputs":[{"name":"self"}],"output":{"name":"h32"}}],[11,"eq","","",0,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"bool"}}],[11,"cmp","","",0,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",0,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"hash","","",0,{"inputs":[{"name":"self"},{"name":"h"}],"output":null}],[11,"index","","",0,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"u8"}}],[11,"index_mut","","",0,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"u8"}}],[11,"index","","",0,null],[11,"index_mut","","",0,null],[11,"index","","",0,null],[11,"index_mut","","",0,null],[11,"bitor","","",0,null],[11,"bitand","","",0,null],[11,"bitxor","","",0,null],[11,"hex","","Get a hex representation.",0,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[11,"default","","",0,{"inputs":[],"output":{"name":"self"}}],[11,"from","","",0,{"inputs":[{"name":"u64"}],"output":{"name":"h32"}}],[11,"from","","",0,{"inputs":[{"name":"str"}],"output":{"name":"h32"}}],[11,"from","","",0,null],[11,"from","","",1,null],[11,"deref","","",1,null],[11,"as_ref","","",1,null],[11,"as_mut","","",1,null],[11,"deref_mut","","",1,null],[11,"new","","Create a new, zero-initialised, instance.",1,{"inputs":[],"output":{"name":"h64"}}],[11,"zero","","Synonym for `new()`. Prefer to new as it's more readable.",1,{"inputs":[],"output":{"name":"h64"}}],[11,"len","","Get the size of this object in bytes.",1,{"inputs":[],"output":{"name":"usize"}}],[11,"as_ptr","","Returns a constant raw pointer to the value",1,null],[11,"as_mut_ptr","","Returns a mutable raw pointer to the value",1,null],[11,"clone_from_slice","","Assign self to be of the same value as a slice of bytes of length `len()`.",1,null],[11,"from_slice","","Convert a slice of bytes of length `len()` to an instance of this type.",1,null],[11,"copy_to","","Copy the data of this object into some mutable slice of length `len()`.",1,null],[11,"contains","","Returns `true` if all bits set in `b` are also set in `self`.",1,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"bool"}}],[11,"is_zero","","Returns `true` if no bits are set.",1,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"low_u64","","Returns the lowest 8 bytes interpreted as a BigEndian integer.",1,{"inputs":[{"name":"self"}],"output":{"name":"u64"}}],[11,"from_str","","",1,{"inputs":[{"name":"str"}],"output":{"generics":["h64","fromhexerror"],"name":"result"}}],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",1,{"inputs":[{"name":"self"}],"output":{"name":"h64"}}],[11,"eq","","",1,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"bool"}}],[11,"cmp","","",1,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",1,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"hash","","",1,{"inputs":[{"name":"self"},{"name":"h"}],"output":null}],[11,"index","","",1,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"u8"}}],[11,"index_mut","","",1,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"u8"}}],[11,"index","","",1,null],[11,"index_mut","","",1,null],[11,"index","","",1,null],[11,"index_mut","","",1,null],[11,"bitor","","",1,null],[11,"bitand","","",1,null],[11,"bitxor","","",1,null],[11,"hex","","Get a hex representation.",1,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[11,"default","","",1,{"inputs":[],"output":{"name":"self"}}],[11,"from","","",1,{"inputs":[{"name":"u64"}],"output":{"name":"h64"}}],[11,"from","","",1,{"inputs":[{"name":"str"}],"output":{"name":"h64"}}],[11,"from","","",1,null],[11,"from","","",2,null],[11,"deref","","",2,null],[11,"as_ref","","",2,null],[11,"as_mut","","",2,null],[11,"deref_mut","","",2,null],[11,"new","","Create a new, zero-initialised, instance.",2,{"inputs":[],"output":{"name":"h128"}}],[11,"zero","","Synonym for `new()`. Prefer to new as it's more readable.",2,{"inputs":[],"output":{"name":"h128"}}],[11,"len","","Get the size of this object in bytes.",2,{"inputs":[],"output":{"name":"usize"}}],[11,"as_ptr","","Returns a constant raw pointer to the value",2,null],[11,"as_mut_ptr","","Returns a mutable raw pointer to the value",2,null],[11,"clone_from_slice","","Assign self to be of the same value as a slice of bytes of length `len()`.",2,null],[11,"from_slice","","Convert a slice of bytes of length `len()` to an instance of this type.",2,null],[11,"copy_to","","Copy the data of this object into some mutable slice of length `len()`.",2,null],[11,"contains","","Returns `true` if all bits set in `b` are also set in `self`.",2,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"bool"}}],[11,"is_zero","","Returns `true` if no bits are set.",2,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"low_u64","","Returns the lowest 8 bytes interpreted as a BigEndian integer.",2,{"inputs":[{"name":"self"}],"output":{"name":"u64"}}],[11,"from_str","","",2,{"inputs":[{"name":"str"}],"output":{"generics":["h128","fromhexerror"],"name":"result"}}],[11,"fmt","","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",2,{"inputs":[{"name":"self"}],"output":{"name":"h128"}}],[11,"eq","","",2,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"bool"}}],[11,"cmp","","",2,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",2,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"hash","","",2,{"inputs":[{"name":"self"},{"name":"h"}],"output":null}],[11,"index","","",2,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"u8"}}],[11,"index_mut","","",2,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"u8"}}],[11,"index","","",2,null],[11,"index_mut","","",2,null],[11,"index","","",2,null],[11,"index_mut","","",2,null],[11,"bitor","","",2,null],[11,"bitand","","",2,null],[11,"bitxor","","",2,null],[11,"hex","","Get a hex representation.",2,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[11,"default","","",2,{"inputs":[],"output":{"name":"self"}}],[11,"from","","",2,{"inputs":[{"name":"u64"}],"output":{"name":"h128"}}],[11,"from","","",2,{"inputs":[{"name":"str"}],"output":{"name":"h128"}}],[11,"from","","",2,null],[11,"from","","",3,null],[11,"deref","","",3,null],[11,"as_ref","","",3,null],[11,"as_mut","","",3,null],[11,"deref_mut","","",3,null],[11,"new","","Create a new, zero-initialised, instance.",3,{"inputs":[],"output":{"name":"h160"}}],[11,"zero","","Synonym for `new()`. Prefer to new as it's more readable.",3,{"inputs":[],"output":{"name":"h160"}}],[11,"len","","Get the size of this object in bytes.",3,{"inputs":[],"output":{"name":"usize"}}],[11,"as_ptr","","Returns a constant raw pointer to the value",3,null],[11,"as_mut_ptr","","Returns a mutable raw pointer to the value",3,null],[11,"clone_from_slice","","Assign self to be of the same value as a slice of bytes of length `len()`.",3,null],[11,"from_slice","","Convert a slice of bytes of length `len()` to an instance of this type.",3,null],[11,"copy_to","","Copy the data of this object into some mutable slice of length `len()`.",3,null],[11,"contains","","Returns `true` if all bits set in `b` are also set in `self`.",3,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"bool"}}],[11,"is_zero","","Returns `true` if no bits are set.",3,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"low_u64","","Returns the lowest 8 bytes interpreted as a BigEndian integer.",3,{"inputs":[{"name":"self"}],"output":{"name":"u64"}}],[11,"from_str","","",3,{"inputs":[{"name":"str"}],"output":{"generics":["h160","fromhexerror"],"name":"result"}}],[11,"fmt","","",3,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",3,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",3,{"inputs":[{"name":"self"}],"output":{"name":"h160"}}],[11,"eq","","",3,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"bool"}}],[11,"cmp","","",3,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",3,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"hash","","",3,{"inputs":[{"name":"self"},{"name":"h"}],"output":null}],[11,"index","","",3,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"u8"}}],[11,"index_mut","","",3,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"u8"}}],[11,"index","","",3,null],[11,"index_mut","","",3,null],[11,"index","","",3,null],[11,"index_mut","","",3,null],[11,"bitor","","",3,null],[11,"bitand","","",3,null],[11,"bitxor","","",3,null],[11,"hex","","Get a hex representation.",3,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[11,"default","","",3,{"inputs":[],"output":{"name":"self"}}],[11,"from","","",3,{"inputs":[{"name":"u64"}],"output":{"name":"h160"}}],[11,"from","","",3,{"inputs":[{"name":"str"}],"output":{"name":"h160"}}],[11,"from","","",3,null],[11,"from","","",4,null],[11,"deref","","",4,null],[11,"as_ref","","",4,null],[11,"as_mut","","",4,null],[11,"deref_mut","","",4,null],[11,"new","","Create a new, zero-initialised, instance.",4,{"inputs":[],"output":{"name":"h256"}}],[11,"zero","","Synonym for `new()`. Prefer to new as it's more readable.",4,{"inputs":[],"output":{"name":"h256"}}],[11,"len","","Get the size of this object in bytes.",4,{"inputs":[],"output":{"name":"usize"}}],[11,"as_ptr","","Returns a constant raw pointer to the value",4,null],[11,"as_mut_ptr","","Returns a mutable raw pointer to the value",4,null],[11,"clone_from_slice","","Assign self to be of the same value as a slice of bytes of length `len()`.",4,null],[11,"from_slice","","Convert a slice of bytes of length `len()` to an instance of this type.",4,null],[11,"copy_to","","Copy the data of this object into some mutable slice of length `len()`.",4,null],[11,"contains","","Returns `true` if all bits set in `b` are also set in `self`.",4,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"bool"}}],[11,"is_zero","","Returns `true` if no bits are set.",4,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"low_u64","","Returns the lowest 8 bytes interpreted as a BigEndian integer.",4,{"inputs":[{"name":"self"}],"output":{"name":"u64"}}],[11,"from_str","","",4,{"inputs":[{"name":"str"}],"output":{"generics":["h256","fromhexerror"],"name":"result"}}],[11,"fmt","","",4,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",4,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",4,{"inputs":[{"name":"self"}],"output":{"name":"h256"}}],[11,"eq","","",4,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"bool"}}],[11,"cmp","","",4,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",4,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"hash","","",4,{"inputs":[{"name":"self"},{"name":"h"}],"output":null}],[11,"index","","",4,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"u8"}}],[11,"index_mut","","",4,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"u8"}}],[11,"index","","",4,null],[11,"index_mut","","",4,null],[11,"index","","",4,null],[11,"index_mut","","",4,null],[11,"bitor","","",4,null],[11,"bitand","","",4,null],[11,"bitxor","","",4,null],[11,"hex","","Get a hex representation.",4,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[11,"default","","",4,{"inputs":[],"output":{"name":"self"}}],[11,"from","","",4,{"inputs":[{"name":"u64"}],"output":{"name":"h256"}}],[11,"from","","",4,{"inputs":[{"name":"str"}],"output":{"name":"h256"}}],[11,"from","","",4,null],[11,"from","","",5,null],[11,"deref","","",5,null],[11,"as_ref","","",5,null],[11,"as_mut","","",5,null],[11,"deref_mut","","",5,null],[11,"new","","Create a new, zero-initialised, instance.",5,{"inputs":[],"output":{"name":"h264"}}],[11,"zero","","Synonym for `new()`. Prefer to new as it's more readable.",5,{"inputs":[],"output":{"name":"h264"}}],[11,"len","","Get the size of this object in bytes.",5,{"inputs":[],"output":{"name":"usize"}}],[11,"as_ptr","","Returns a constant raw pointer to the value",5,null],[11,"as_mut_ptr","","Returns a mutable raw pointer to the value",5,null],[11,"clone_from_slice","","Assign self to be of the same value as a slice of bytes of length `len()`.",5,null],[11,"from_slice","","Convert a slice of bytes of length `len()` to an instance of this type.",5,null],[11,"copy_to","","Copy the data of this object into some mutable slice of length `len()`.",5,null],[11,"contains","","Returns `true` if all bits set in `b` are also set in `self`.",5,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"bool"}}],[11,"is_zero","","Returns `true` if no bits are set.",5,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"low_u64","","Returns the lowest 8 bytes interpreted as a BigEndian integer.",5,{"inputs":[{"name":"self"}],"output":{"name":"u64"}}],[11,"from_str","","",5,{"inputs":[{"name":"str"}],"output":{"generics":["h264","fromhexerror"],"name":"result"}}],[11,"fmt","","",5,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",5,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",5,{"inputs":[{"name":"self"}],"output":{"name":"h264"}}],[11,"eq","","",5,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"bool"}}],[11,"cmp","","",5,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",5,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"hash","","",5,{"inputs":[{"name":"self"},{"name":"h"}],"output":null}],[11,"index","","",5,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"u8"}}],[11,"index_mut","","",5,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"u8"}}],[11,"index","","",5,null],[11,"index_mut","","",5,null],[11,"index","","",5,null],[11,"index_mut","","",5,null],[11,"bitor","","",5,null],[11,"bitand","","",5,null],[11,"bitxor","","",5,null],[11,"hex","","Get a hex representation.",5,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[11,"default","","",5,{"inputs":[],"output":{"name":"self"}}],[11,"from","","",5,{"inputs":[{"name":"u64"}],"output":{"name":"h264"}}],[11,"from","","",5,{"inputs":[{"name":"str"}],"output":{"name":"h264"}}],[11,"from","","",5,null],[11,"from","","",6,null],[11,"deref","","",6,null],[11,"as_ref","","",6,null],[11,"as_mut","","",6,null],[11,"deref_mut","","",6,null],[11,"new","","Create a new, zero-initialised, instance.",6,{"inputs":[],"output":{"name":"h512"}}],[11,"zero","","Synonym for `new()`. Prefer to new as it's more readable.",6,{"inputs":[],"output":{"name":"h512"}}],[11,"len","","Get the size of this object in bytes.",6,{"inputs":[],"output":{"name":"usize"}}],[11,"as_ptr","","Returns a constant raw pointer to the value",6,null],[11,"as_mut_ptr","","Returns a mutable raw pointer to the value",6,null],[11,"clone_from_slice","","Assign self to be of the same value as a slice of bytes of length `len()`.",6,null],[11,"from_slice","","Convert a slice of bytes of length `len()` to an instance of this type.",6,null],[11,"copy_to","","Copy the data of this object into some mutable slice of length `len()`.",6,null],[11,"contains","","Returns `true` if all bits set in `b` are also set in `self`.",6,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"bool"}}],[11,"is_zero","","Returns `true` if no bits are set.",6,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"low_u64","","Returns the lowest 8 bytes interpreted as a BigEndian integer.",6,{"inputs":[{"name":"self"}],"output":{"name":"u64"}}],[11,"from_str","","",6,{"inputs":[{"name":"str"}],"output":{"generics":["h512","fromhexerror"],"name":"result"}}],[11,"fmt","","",6,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",6,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",6,{"inputs":[{"name":"self"}],"output":{"name":"h512"}}],[11,"eq","","",6,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"bool"}}],[11,"cmp","","",6,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",6,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"hash","","",6,{"inputs":[{"name":"self"},{"name":"h"}],"output":null}],[11,"index","","",6,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"u8"}}],[11,"index_mut","","",6,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"u8"}}],[11,"index","","",6,null],[11,"index_mut","","",6,null],[11,"index","","",6,null],[11,"index_mut","","",6,null],[11,"bitor","","",6,null],[11,"bitand","","",6,null],[11,"bitxor","","",6,null],[11,"hex","","Get a hex representation.",6,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[11,"default","","",6,{"inputs":[],"output":{"name":"self"}}],[11,"from","","",6,{"inputs":[{"name":"u64"}],"output":{"name":"h512"}}],[11,"from","","",6,{"inputs":[{"name":"str"}],"output":{"name":"h512"}}],[11,"from","","",6,null],[11,"from","","",7,null],[11,"deref","","",7,null],[11,"as_ref","","",7,null],[11,"as_mut","","",7,null],[11,"deref_mut","","",7,null],[11,"new","","Create a new, zero-initialised, instance.",7,{"inputs":[],"output":{"name":"h520"}}],[11,"zero","","Synonym for `new()`. Prefer to new as it's more readable.",7,{"inputs":[],"output":{"name":"h520"}}],[11,"len","","Get the size of this object in bytes.",7,{"inputs":[],"output":{"name":"usize"}}],[11,"as_ptr","","Returns a constant raw pointer to the value",7,null],[11,"as_mut_ptr","","Returns a mutable raw pointer to the value",7,null],[11,"clone_from_slice","","Assign self to be of the same value as a slice of bytes of length `len()`.",7,null],[11,"from_slice","","Convert a slice of bytes of length `len()` to an instance of this type.",7,null],[11,"copy_to","","Copy the data of this object into some mutable slice of length `len()`.",7,null],[11,"contains","","Returns `true` if all bits set in `b` are also set in `self`.",7,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"bool"}}],[11,"is_zero","","Returns `true` if no bits are set.",7,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"low_u64","","Returns the lowest 8 bytes interpreted as a BigEndian integer.",7,{"inputs":[{"name":"self"}],"output":{"name":"u64"}}],[11,"from_str","","",7,{"inputs":[{"name":"str"}],"output":{"generics":["h520","fromhexerror"],"name":"result"}}],[11,"fmt","","",7,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",7,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",7,{"inputs":[{"name":"self"}],"output":{"name":"h520"}}],[11,"eq","","",7,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"bool"}}],[11,"cmp","","",7,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",7,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"hash","","",7,{"inputs":[{"name":"self"},{"name":"h"}],"output":null}],[11,"index","","",7,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"u8"}}],[11,"index_mut","","",7,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"u8"}}],[11,"index","","",7,null],[11,"index_mut","","",7,null],[11,"index","","",7,null],[11,"index_mut","","",7,null],[11,"bitor","","",7,null],[11,"bitand","","",7,null],[11,"bitxor","","",7,null],[11,"hex","","Get a hex representation.",7,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[11,"default","","",7,{"inputs":[],"output":{"name":"self"}}],[11,"from","","",7,{"inputs":[{"name":"u64"}],"output":{"name":"h520"}}],[11,"from","","",7,{"inputs":[{"name":"str"}],"output":{"name":"h520"}}],[11,"from","","",7,null],[11,"from","","",8,null],[11,"deref","","",8,null],[11,"as_ref","","",8,null],[11,"as_mut","","",8,null],[11,"deref_mut","","",8,null],[11,"new","","Create a new, zero-initialised, instance.",8,{"inputs":[],"output":{"name":"h1024"}}],[11,"zero","","Synonym for `new()`. Prefer to new as it's more readable.",8,{"inputs":[],"output":{"name":"h1024"}}],[11,"len","","Get the size of this object in bytes.",8,{"inputs":[],"output":{"name":"usize"}}],[11,"as_ptr","","Returns a constant raw pointer to the value",8,null],[11,"as_mut_ptr","","Returns a mutable raw pointer to the value",8,null],[11,"clone_from_slice","","Assign self to be of the same value as a slice of bytes of length `len()`.",8,null],[11,"from_slice","","Convert a slice of bytes of length `len()` to an instance of this type.",8,null],[11,"copy_to","","Copy the data of this object into some mutable slice of length `len()`.",8,null],[11,"contains","","Returns `true` if all bits set in `b` are also set in `self`.",8,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"bool"}}],[11,"is_zero","","Returns `true` if no bits are set.",8,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"low_u64","","Returns the lowest 8 bytes interpreted as a BigEndian integer.",8,{"inputs":[{"name":"self"}],"output":{"name":"u64"}}],[11,"from_str","","",8,{"inputs":[{"name":"str"}],"output":{"generics":["h1024","fromhexerror"],"name":"result"}}],[11,"fmt","","",8,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",8,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",8,{"inputs":[{"name":"self"}],"output":{"name":"h1024"}}],[11,"eq","","",8,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"bool"}}],[11,"cmp","","",8,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",8,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"hash","","",8,{"inputs":[{"name":"self"},{"name":"h"}],"output":null}],[11,"index","","",8,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"u8"}}],[11,"index_mut","","",8,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"u8"}}],[11,"index","","",8,null],[11,"index_mut","","",8,null],[11,"index","","",8,null],[11,"index_mut","","",8,null],[11,"bitor","","",8,null],[11,"bitand","","",8,null],[11,"bitxor","","",8,null],[11,"hex","","Get a hex representation.",8,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[11,"default","","",8,{"inputs":[],"output":{"name":"self"}}],[11,"from","","",8,{"inputs":[{"name":"u64"}],"output":{"name":"h1024"}}],[11,"from","","",8,{"inputs":[{"name":"str"}],"output":{"name":"h1024"}}],[11,"from","","",8,null],[11,"from","","",9,null],[11,"deref","","",9,null],[11,"as_ref","","",9,null],[11,"as_mut","","",9,null],[11,"deref_mut","","",9,null],[11,"new","","Create a new, zero-initialised, instance.",9,{"inputs":[],"output":{"name":"h2048"}}],[11,"zero","","Synonym for `new()`. Prefer to new as it's more readable.",9,{"inputs":[],"output":{"name":"h2048"}}],[11,"len","","Get the size of this object in bytes.",9,{"inputs":[],"output":{"name":"usize"}}],[11,"as_ptr","","Returns a constant raw pointer to the value",9,null],[11,"as_mut_ptr","","Returns a mutable raw pointer to the value",9,null],[11,"clone_from_slice","","Assign self to be of the same value as a slice of bytes of length `len()`.",9,null],[11,"from_slice","","Convert a slice of bytes of length `len()` to an instance of this type.",9,null],[11,"copy_to","","Copy the data of this object into some mutable slice of length `len()`.",9,null],[11,"contains","","Returns `true` if all bits set in `b` are also set in `self`.",9,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"bool"}}],[11,"is_zero","","Returns `true` if no bits are set.",9,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"low_u64","","Returns the lowest 8 bytes interpreted as a BigEndian integer.",9,{"inputs":[{"name":"self"}],"output":{"name":"u64"}}],[11,"from_str","","",9,{"inputs":[{"name":"str"}],"output":{"generics":["h2048","fromhexerror"],"name":"result"}}],[11,"fmt","","",9,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",9,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",9,{"inputs":[{"name":"self"}],"output":{"name":"h2048"}}],[11,"eq","","",9,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"bool"}}],[11,"cmp","","",9,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",9,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"hash","","",9,{"inputs":[{"name":"self"},{"name":"h"}],"output":null}],[11,"index","","",9,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"u8"}}],[11,"index_mut","","",9,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"u8"}}],[11,"index","","",9,null],[11,"index_mut","","",9,null],[11,"index","","",9,null],[11,"index_mut","","",9,null],[11,"bitor","","",9,null],[11,"bitand","","",9,null],[11,"bitxor","","",9,null],[11,"hex","","Get a hex representation.",9,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[11,"default","","",9,{"inputs":[],"output":{"name":"self"}}],[11,"from","","",9,{"inputs":[{"name":"u64"}],"output":{"name":"h2048"}}],[11,"from","","",9,{"inputs":[{"name":"str"}],"output":{"name":"h2048"}}],[11,"from","","",9,null]],"paths":[[3,"H32"],[3,"H64"],[3,"H128"],[3,"H160"],[3,"H256"],[3,"H264"],[3,"H512"],[3,"H520"],[3,"H1024"],[3,"H2048"]]};
searchIndex["pwasm_abi"] = {"doc":"WASM ABI Tools","items":[[0,"eth","pwasm_abi","Legacy Ethereum-like ABI generator",null,null],[3,"Stream","pwasm_abi::eth","Stream interpretation of incoming payload",null,null],[3,"Sink","","Sink for returning number of arguments",null,null],[4,"Error","","Error for decoding rust types from stream",null,null],[13,"InvalidBool","","Invalid bool for provided input",0,null],[13,"InvalidU32","","Invalid u32 for provided input",0,null],[13,"InvalidU64","","Invalid u64 for provided input",0,null],[13,"UnexpectedEof","","Unexpected end of the stream",0,null],[13,"InvalidPadding","","Invalid padding for fixed type",0,null],[13,"Other","","Other error",0,null],[11,"new","","New stream for known payload",1,null],[11,"pop","","Pop next argument of known type",1,{"inputs":[{"name":"self"}],"output":{"generics":["error"],"name":"result"}}],[11,"position","","Current position for the stream",1,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"advance","","Advance stream position for `amount` bytes",1,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"generics":["usize","error"],"name":"result"}}],[11,"finish_advance","","Finish current advance, advancing stream to the next 32 byte step",1,{"inputs":[{"name":"self"}],"output":null}],[11,"payload","","Stream payload",1,null],[11,"peek","","Peek next byte in stream",1,{"inputs":[{"name":"self"}],"output":{"name":"u8"}}],[11,"new","","New sink with known capacity",2,{"inputs":[{"name":"usize"}],"output":{"name":"self"}}],[11,"push","","Consume `val` to the Sink",2,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"drain_to","","Drain current Sink to the target vector",2,{"inputs":[{"name":"self"},{"name":"vec"}],"output":null}],[11,"finalize_panicking","","Consume current Sink to produce a vector with content. May panic if declared number of arguments does not match the resulting number of bytes should be produced.",2,{"inputs":[{"name":"self"}],"output":{"generics":["u8"],"name":"vec"}}],[11,"preamble_mut","","Mutable reference to the Sink preamble",2,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"heap_mut","","Mutable reference to the Sink heap",2,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[8,"AsLog","","As log trait for how primitive types are represented as indexed arguments of the event log",null,null],[10,"as_log","","Convert type to hash representation for the event log.",3,{"inputs":[{"name":"self"}],"output":{"name":"h256"}}],[8,"AbiType","","Abi type trait",null,null],[10,"decode","","Insantiate type from data stream",4,{"inputs":[{"name":"stream"}],"output":{"generics":["error"],"name":"result"}}],[10,"encode","","Push type to data sink",4,{"inputs":[{"name":"self"},{"name":"sink"}],"output":null}],[18,"IS_FIXED","","Whether type has fixed length or not",4,null],[8,"EndpointInterface","","Endpoint interface for contracts",null,null],[10,"dispatch","","Dispatch payload for regular method",5,null],[10,"dispatch_ctor","","Dispatch constructor payload",5,null],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",0,{"inputs":[{"name":"self"},{"name":"error"}],"output":{"name":"bool"}}]],"paths":[[4,"Error"],[3,"Stream"],[3,"Sink"],[8,"AsLog"],[8,"AbiType"],[8,"EndpointInterface"]]};
searchIndex["pwasm_alloc"] = {"doc":"Custom allocator crate for wasm","items":[[3,"WasmAllocator","pwasm_alloc","Wasm allocator",null,null]],"paths":[]};
searchIndex["pwasm_ethereum"] = {"doc":"Externs library to interact with Ethereum-like network","items":[[3,"Error","pwasm_ethereum","Generic wasm error",null,null],[5,"suicide","","Halt execution and register account for deletion.",null,null],[5,"balance","","Returns balance of the given address.",null,{"inputs":[{"name":"address"}],"output":{"name":"u256"}}],[5,"create","","Create a new account with the given code.",null,null],[5,"call","","Message-call into an account.",null,null],[5,"call_code","","Like [`call`], but with code at the given `address`.",null,null],[5,"static_call","","Like [`call`], but this call and any of it's subcalls are disallowed to modify any storage.",null,null],[5,"block_hash","","Returns the hash of one of the 256 most recent complete blocks.",null,{"inputs":[{"name":"u64"}],"output":{"name":"h256"}}],[5,"coinbase","","Get the block’s beneficiary address (i.e miner's account address).",null,{"inputs":[],"output":{"name":"address"}}],[5,"timestamp","","Get the block's timestamp.",null,{"inputs":[],"output":{"name":"u64"}}],[5,"block_number","","Get the block's number.",null,{"inputs":[],"output":{"name":"u64"}}],[5,"difficulty","","Get the block's difficulty.",null,{"inputs":[],"output":{"name":"u256"}}],[5,"gas_limit","","Get the block's gas limit.",null,{"inputs":[],"output":{"name":"u256"}}],[5,"sender","","Get caller address.",null,{"inputs":[],"output":{"name":"address"}}],[5,"origin","","Get execution origination address.",null,{"inputs":[],"output":{"name":"address"}}],[5,"value","","Get deposited value by the instruction/transaction responsible for this execution.",null,{"inputs":[],"output":{"name":"u256"}}],[5,"address","","Get address of currently executing account.",null,{"inputs":[],"output":{"name":"address"}}],[5,"log","","Creates log entry with given topics and data.",null,null],[5,"read","","Performs read from the storage.",null,null],[5,"write","","Performs write to the storage",null,null],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}]],"paths":[[3,"Error"]]};
searchIndex["pwasm_libc"] = {"doc":"libc externs crate","items":[[5,"memcmp","pwasm_libc","memcmp extern",null,null],[5,"memcpy","","memcpy extern",null,null],[5,"memmove","","memmove extern",null,null],[5,"memset","","memset extern",null,null],[5,"malloc","","malloc extern",null,null],[5,"free","","free extern",null,null]],"paths":[]};
searchIndex["pwasm_std"] = {"doc":"Standard library for parity wasm programs","items":[[3,"Box","pwasm_std","A pointer type for heap allocation.",null,null],[3,"String","","A UTF-8 encoded, growable string.",null,null],[0,"str","","Unicode string slices.",null,null],[3,"EncodeUtf16","pwasm_std::str","An iterator of [`u16`] over the string encoded as UTF-16.",null,null],[5,"from_boxed_utf8_unchecked","","Converts a boxed slice of bytes to a boxed string slice without checking that the string contains valid UTF-8.",null,{"inputs":[{"name":"box"}],"output":{"generics":["str"],"name":"box"}}],[8,"FromStr","","A trait to abstract the idea of creating a new instance of a type from a string.",null,null],[16,"Err","","The associated error which can be returned from parsing.",0,null],[10,"from_str","","Parses a string `s` to return a value of this type.",0,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[3,"SplitTerminator","","Created with the method [`split_terminator`].",null,null],[3,"MatchIndices","","Created with the method [`match_indices`].",null,null],[5,"from_utf8_unchecked_mut","","Converts a slice of bytes to a string slice without checking that the string contains valid UTF-8; mutable version.",null,null],[3,"Chars","","An iterator over the [`char`]s of a string slice.",null,null],[0,"pattern","","The string Pattern API.",null,null],[8,"Pattern","pwasm_std::str::pattern","A string pattern.",null,null],[16,"Searcher","","Associated searcher for this pattern",1,null],[10,"into_searcher","","Constructs the associated searcher from `self` and the `haystack` to search in.",1,null],[11,"is_contained_in","","Checks whether the pattern matches anywhere in the haystack",1,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"bool"}}],[11,"is_prefix_of","","Checks whether the pattern matches at the front of the haystack",1,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"bool"}}],[11,"is_suffix_of","","Checks whether the pattern matches at the back of the haystack",1,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"bool"}}],[4,"SearchStep","","Result of calling `Searcher::next()` or `ReverseSearcher::next_back()`.",null,null],[13,"Match","","Expresses that a match of the pattern has been found at `haystack[a..b]`.",2,null],[13,"Reject","","Expresses that `haystack[a..b]` has been rejected as a possible match of the pattern.",2,null],[13,"Done","","Expresses that every byte of the haystack has been visited, ending the iteration.",2,null],[8,"Searcher","","A searcher for a string pattern.",null,null],[10,"haystack","","Getter for the underlying string to be searched in",3,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[10,"next","","Performs the next search step starting from the front.",3,{"inputs":[{"name":"self"}],"output":{"name":"searchstep"}}],[11,"next_match","","Find the next `Match` result. See `next()`",3,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next_reject","","Find the next `Reject` result. See `next()` and `next_match()`",3,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[8,"ReverseSearcher","","A reverse searcher for a string pattern.",null,null],[10,"next_back","","Performs the next search step starting from the back.",4,{"inputs":[{"name":"self"}],"output":{"name":"searchstep"}}],[11,"next_match_back","","Find the next `Match` result. See `next_back()`",4,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next_reject_back","","Find the next `Reject` result. See `next_back()`",4,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[8,"DoubleEndedSearcher","","A marker trait to express that a `ReverseSearcher` can be used for a `DoubleEndedIterator` implementation.",null,null],[3,"CharSearcher","","Associated type for `<char as Pattern<'a>>::Searcher`.",null,null],[3,"CharSliceSearcher","","Associated type for `<&[char] as Pattern<'a>>::Searcher`.",null,null],[3,"CharPredicateSearcher","","Associated type for `<F as Pattern<'a>>::Searcher`.",null,null],[3,"StrSearcher","","Associated type for `<&str as Pattern<'a>>::Searcher`.",null,null],[5,"from_utf8_unchecked","pwasm_std::str","Converts a slice of bytes to a string slice without checking that the string contains valid UTF-8.",null,null],[3,"RSplitN","","Created with the method [`rsplitn`].",null,null],[3,"LinesAny","","Created with the method [`lines_any`].",null,null],[3,"RSplit","","Created with the method [`rsplit`].",null,null],[3,"RMatches","","Created with the method [`rmatches`].",null,null],[3,"SplitWhitespace","","An iterator over the non-whitespace substrings of a string, separated by any amount of whitespace.",null,null],[3,"Lines","","An iterator over the lines of a string, as string slices.",null,null],[5,"from_utf8","","Converts a slice of bytes to a string slice.",null,null],[5,"from_utf8_mut","","Converts a mutable slice of bytes to a mutable string slice.",null,null],[3,"Split","","Created with the method [`split`].",null,null],[3,"Bytes","","An iterator over the bytes of a string slice.",null,null],[3,"SplitN","","Created with the method [`splitn`].",null,null],[3,"Matches","","Created with the method [`matches`].",null,null],[3,"ParseBoolError","","An error returned when parsing a `bool` using [`from_str`] fails",null,null],[3,"CharIndices","","An iterator over the [`char`]s of a string slice, and their positions.",null,null],[3,"Utf8Error","","Errors which can occur when attempting to interpret a sequence of [`u8`] as a string.",null,null],[3,"RSplitTerminator","","Created with the method [`rsplit_terminator`].",null,null],[3,"RMatchIndices","","Created with the method [`rmatch_indices`].",null,null],[3,"Vec","pwasm_std","A contiguous growable array type, written `Vec<T>` but pronounced 'vector'.",null,null],[3,"H32","pwasm_std::hash","Unformatted binary data of fixed length.",null,null],[12,"0","","",5,null],[3,"H64","","Unformatted binary data of fixed length.",null,null],[12,"0","","",6,null],[3,"H128","","Unformatted binary data of fixed length.",null,null],[12,"0","","",7,null],[3,"H160","","Unformatted binary data of fixed length.",null,null],[12,"0","","",8,null],[3,"H256","","Unformatted binary data of fixed length.",null,null],[12,"0","","",9,null],[3,"H264","","Unformatted binary data of fixed length.",null,null],[12,"0","","",10,null],[3,"H512","","Unformatted binary data of fixed length.",null,null],[12,"0","","",11,null],[3,"H520","","Unformatted binary data of fixed length.",null,null],[12,"0","","",12,null],[3,"H1024","","Unformatted binary data of fixed length.",null,null],[12,"0","","",13,null],[3,"H2048","","Unformatted binary data of fixed length.",null,null],[12,"0","","",14,null],[6,"Address","","",null,null],[3,"WrappedArgs","pwasm_std","Input data of a contract.",null,null],[3,"WrappedResult","","Writeable handle of execution results.",null,null],[5,"parse_args","","Parse decriptor into wrapped args and result.",null,null],[5,"keccak","","Compute keccak hash.",null,{"inputs":[{"name":"t"}],"output":{"name":"h256"}}],[5,"read_u32","","Read u32 using native endianness",null,null],[5,"write_u32","","Write u32 using native endianness",null,null],[5,"write_ptr","","Write ptr using native endianness",null,null],[5,"read_u64","","Read u64 using native endianness",null,null],[5,"write_u64","","Write u64 using native endianness",null,null],[0,"logger","","Logger extensions for pwasm-std",null,null],[5,"debug","pwasm_std::logger","Log debug message to the runtime",null,{"inputs":[{"name":"str"}],"output":null}],[11,"deref","pwasm_std","",15,null],[11,"as_ref","","",15,null],[11,"done","","Finalize writing result into the descriptor",16,{"inputs":[{"name":"self"},{"generics":["u8"],"name":"vec"}],"output":null}],[14,"format","","Creates a `String` using interpolation of runtime expressions.",null,null],[14,"vec","","Creates a [`Vec`] containing the arguments.",null,null],[11,"new","","Allocates memory on the heap and then places `x` into it.",17,{"inputs":[{"name":"t"}],"output":{"name":"box"}}],[11,"from_raw","","Constructs a box from a raw pointer.",17,null],[11,"into_raw","","Consumes the `Box`, returning the wrapped raw pointer.",17,null],[11,"into_raw_non_null","","Consumes the `Box`, returning the wrapped pointer as `NonNull<T>`.",17,{"inputs":[{"name":"box"}],"output":{"name":"nonnull"}}],[11,"into_unique","","",17,{"inputs":[{"name":"box"}],"output":{"name":"unique"}}],[11,"leak","","Consumes and leaks the `Box`, returning a mutable reference, `&'a mut T`. Here, the lifetime `'a` may be chosen to be `'static`.",17,{"inputs":[{"name":"box"}],"output":{"name":"t"}}],[11,"downcast","","Attempt to downcast the box to a concrete type.",17,{"inputs":[{"name":"self"}],"output":{"generics":["box","box"],"name":"result"}}],[11,"downcast","","Attempt to downcast the box to a concrete type.",17,{"inputs":[{"name":"self"}],"output":{"generics":["box","box"],"name":"result"}}],[11,"to_socket_addrs","","",18,{"inputs":[{"name":"self"}],"output":{"generics":["intoiter","error"],"name":"result"}}],[11,"default","","",17,{"inputs":[],"output":{"generics":["cstr"],"name":"box"}}],[11,"default","","",17,{"inputs":[],"output":{"generics":["osstr"],"name":"box"}}],[11,"description","pwasm_std::str","",19,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"description","pwasm_std","",17,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"cause","","",17,{"inputs":[{"name":"self"}],"output":{"generics":["error"],"name":"option"}}],[11,"description","pwasm_std::str","",20,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"read","pwasm_std","",17,null],[11,"initializer","","",17,{"inputs":[{"name":"self"}],"output":{"name":"initializer"}}],[11,"read_to_end","","",17,{"inputs":[{"name":"self"},{"name":"vec"}],"output":{"generics":["usize","error"],"name":"result"}}],[11,"read_to_string","","",17,{"inputs":[{"name":"self"},{"name":"string"}],"output":{"generics":["usize","error"],"name":"result"}}],[11,"read_exact","","",17,null],[11,"fill_buf","","",17,{"inputs":[{"name":"self"}],"output":{"generics":["error"],"name":"result"}}],[11,"consume","","",17,null],[11,"read_until","","",17,{"inputs":[{"name":"self"},{"name":"u8"},{"name":"vec"}],"output":{"generics":["usize","error"],"name":"result"}}],[11,"read_line","","",17,{"inputs":[{"name":"self"},{"name":"string"}],"output":{"generics":["usize","error"],"name":"result"}}],[11,"seek","","",17,{"inputs":[{"name":"self"},{"name":"seekfrom"}],"output":{"generics":["u64","error"],"name":"result"}}],[11,"write","","",21,null],[11,"write_all","","",21,null],[11,"flush","","",21,{"inputs":[{"name":"self"}],"output":{"generics":["error"],"name":"result"}}],[11,"write","","",17,null],[11,"flush","","",17,{"inputs":[{"name":"self"}],"output":{"generics":["error"],"name":"result"}}],[11,"write_all","","",17,null],[11,"write_fmt","","",17,{"inputs":[{"name":"self"},{"name":"arguments"}],"output":{"generics":["error"],"name":"result"}}],[11,"as_ref","","",18,{"inputs":[{"name":"self"}],"output":{"name":"osstr"}}],[11,"as_ref","","",18,{"inputs":[{"name":"self"}],"output":{"name":"path"}}],[11,"from","","",17,{"inputs":[{"name":"string"}],"output":{"generics":["error"],"name":"box"}}],[11,"from","","",17,{"inputs":[{"generics":["str"],"name":"cow"}],"output":{"generics":["error"],"name":"box"}}],[11,"from","","",17,{"inputs":[{"name":"osstr"}],"output":{"generics":["osstr"],"name":"box"}}],[11,"from","","",17,{"inputs":[{"name":"path"}],"output":{"generics":["path"],"name":"box"}}],[11,"from","","",17,{"inputs":[{"name":"str"}],"output":{"generics":["error"],"name":"box"}}],[11,"from","","",17,{"inputs":[{"name":"str"}],"output":{"generics":["error"],"name":"box"}}],[11,"from","","",17,{"inputs":[{"name":"osstring"}],"output":{"generics":["osstr"],"name":"box"}}],[11,"from","","",17,{"inputs":[{"name":"pathbuf"}],"output":{"generics":["path"],"name":"box"}}],[11,"from","","",17,{"inputs":[{"name":"cstring"}],"output":{"generics":["cstr"],"name":"box"}}],[11,"from","","",17,{"inputs":[{"name":"e"}],"output":{"generics":["error"],"name":"box"}}],[11,"from","","",17,{"inputs":[{"name":"e"}],"output":{"generics":["error"],"name":"box"}}],[11,"from","","",17,{"inputs":[{"name":"string"}],"output":{"generics":["error"],"name":"box"}}],[11,"from","","",17,{"inputs":[{"name":"cstr"}],"output":{"generics":["cstr"],"name":"box"}}],[11,"from","","",17,{"inputs":[{"generics":["str"],"name":"cow"}],"output":{"generics":["error"],"name":"box"}}],[11,"from","","",21,{"inputs":[{"name":"cstring"}],"output":{"generics":["u8"],"name":"vec"}}],[11,"clone","pwasm_std::str","",22,{"inputs":[{"name":"self"}],"output":{"name":"matchindices"}}],[11,"clone","","",23,{"inputs":[{"name":"self"}],"output":{"name":"rsplitn"}}],[11,"clone","pwasm_std::str::pattern","",24,{"inputs":[{"name":"self"}],"output":{"name":"charsearcher"}}],[11,"clone","pwasm_std::str","",25,{"inputs":[{"name":"self"}],"output":{"name":"splitn"}}],[11,"clone","","",26,{"inputs":[{"name":"self"}],"output":{"name":"lines"}}],[11,"clone","","",27,{"inputs":[{"name":"self"}],"output":{"name":"split"}}],[11,"clone","","",28,{"inputs":[{"name":"self"}],"output":{"name":"chars"}}],[11,"clone","pwasm_std::str::pattern","",29,{"inputs":[{"name":"self"}],"output":{"name":"charslicesearcher"}}],[11,"clone","pwasm_std::str","",30,{"inputs":[{"name":"self"}],"output":{"name":"linesany"}}],[11,"clone","","",31,{"inputs":[{"name":"self"}],"output":{"name":"rsplit"}}],[11,"clone","","",32,{"inputs":[{"name":"self"}],"output":{"name":"charindices"}}],[11,"clone","","",33,{"inputs":[{"name":"self"}],"output":{"name":"bytes"}}],[11,"clone","","",34,{"inputs":[{"name":"self"}],"output":{"name":"rmatches"}}],[11,"clone","","",35,{"inputs":[{"name":"self"}],"output":{"name":"matches"}}],[11,"clone","","",20,{"inputs":[{"name":"self"}],"output":{"name":"parseboolerror"}}],[11,"clone","","",36,{"inputs":[{"name":"self"}],"output":{"name":"rmatchindices"}}],[11,"clone","","",37,{"inputs":[{"name":"self"}],"output":{"name":"rsplitterminator"}}],[11,"clone","pwasm_std::str::pattern","",38,{"inputs":[{"name":"self"}],"output":{"name":"strsearcher"}}],[11,"clone","","",39,{"inputs":[{"name":"self"}],"output":{"name":"charpredicatesearcher"}}],[11,"clone","","",2,{"inputs":[{"name":"self"}],"output":{"name":"searchstep"}}],[11,"clone","pwasm_std::str","",19,{"inputs":[{"name":"self"}],"output":{"name":"utf8error"}}],[11,"clone","","",40,{"inputs":[{"name":"self"}],"output":{"name":"splitterminator"}}],[11,"eq","pwasm_std::str::pattern","",2,{"inputs":[{"name":"self"},{"name":"searchstep"}],"output":{"name":"bool"}}],[11,"ne","","",2,{"inputs":[{"name":"self"},{"name":"searchstep"}],"output":{"name":"bool"}}],[11,"eq","pwasm_std::str","",19,{"inputs":[{"name":"self"},{"name":"utf8error"}],"output":{"name":"bool"}}],[11,"ne","","",19,{"inputs":[{"name":"self"},{"name":"utf8error"}],"output":{"name":"bool"}}],[11,"eq","","",20,{"inputs":[{"name":"self"},{"name":"parseboolerror"}],"output":{"name":"bool"}}],[11,"ne","","",20,{"inputs":[{"name":"self"},{"name":"parseboolerror"}],"output":{"name":"bool"}}],[11,"fmt","","",19,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",22,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",35,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",36,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","pwasm_std::str::pattern","",38,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","pwasm_std::str","",34,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","pwasm_std::str::pattern","",24,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","pwasm_std::str","",25,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","pwasm_std::str::pattern","",39,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","pwasm_std::str","",40,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",32,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",23,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",37,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","pwasm_std::str::pattern","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",29,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","pwasm_std::str","",27,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",26,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",31,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",20,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",28,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",30,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",33,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"next_back","","",36,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next_back","","",35,{"inputs":[{"name":"self"}],"output":{"generics":["str"],"name":"option"}}],[11,"next_back","","",40,{"inputs":[{"name":"self"}],"output":{"generics":["str"],"name":"option"}}],[11,"next_back","","",33,{"inputs":[{"name":"self"}],"output":{"generics":["u8"],"name":"option"}}],[11,"rfind","","",33,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"name":"option"}}],[11,"next_back","","",27,{"inputs":[{"name":"self"}],"output":{"generics":["str"],"name":"option"}}],[11,"next_back","","",26,{"inputs":[{"name":"self"}],"output":{"generics":["str"],"name":"option"}}],[11,"next_back","","",30,{"inputs":[{"name":"self"}],"output":{"generics":["str"],"name":"option"}}],[11,"next_back","","",32,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next_back","","",34,{"inputs":[{"name":"self"}],"output":{"generics":["str"],"name":"option"}}],[11,"next_back","","",28,{"inputs":[{"name":"self"}],"output":{"generics":["char"],"name":"option"}}],[11,"next_back","","",22,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next_back","","",37,{"inputs":[{"name":"self"}],"output":{"generics":["str"],"name":"option"}}],[11,"next_back","","",31,{"inputs":[{"name":"self"}],"output":{"generics":["str"],"name":"option"}}],[11,"next","","",23,{"inputs":[{"name":"self"}],"output":{"generics":["str"],"name":"option"}}],[11,"next","","",40,{"inputs":[{"name":"self"}],"output":{"generics":["str"],"name":"option"}}],[11,"next","","",35,{"inputs":[{"name":"self"}],"output":{"generics":["str"],"name":"option"}}],[11,"next","","",25,{"inputs":[{"name":"self"}],"output":{"generics":["str"],"name":"option"}}],[11,"next","","",27,{"inputs":[{"name":"self"}],"output":{"generics":["str"],"name":"option"}}],[11,"next","","",36,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next","","",37,{"inputs":[{"name":"self"}],"output":{"generics":["str"],"name":"option"}}],[11,"next","","",26,{"inputs":[{"name":"self"}],"output":{"generics":["str"],"name":"option"}}],[11,"size_hint","","",26,null],[11,"next","","",22,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next","","",32,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"count","","",32,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"size_hint","","",32,null],[11,"last","","",32,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next","","",31,{"inputs":[{"name":"self"}],"output":{"generics":["str"],"name":"option"}}],[11,"next","","",30,{"inputs":[{"name":"self"}],"output":{"generics":["str"],"name":"option"}}],[11,"size_hint","","",30,null],[11,"next","","",34,{"inputs":[{"name":"self"}],"output":{"generics":["str"],"name":"option"}}],[11,"next","","",33,{"inputs":[{"name":"self"}],"output":{"generics":["u8"],"name":"option"}}],[11,"size_hint","","",33,null],[11,"count","","",33,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"last","","",33,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"nth","","",33,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"option"}}],[11,"all","","",33,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"bool"}}],[11,"any","","",33,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"bool"}}],[11,"find","","",33,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"name":"option"}}],[11,"position","","",33,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"generics":["usize"],"name":"option"}}],[11,"rposition","","",33,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"generics":["usize"],"name":"option"}}],[11,"next","","",28,{"inputs":[{"name":"self"}],"output":{"generics":["char"],"name":"option"}}],[11,"count","","",28,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"size_hint","","",28,null],[11,"last","","",28,{"inputs":[{"name":"self"}],"output":{"generics":["char"],"name":"option"}}],[11,"len","","",33,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"is_empty","","",33,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"next_back","pwasm_std::str::pattern","",39,{"inputs":[{"name":"self"}],"output":{"name":"searchstep"}}],[11,"next_match_back","","",39,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next_reject_back","","",39,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next_back","","",38,{"inputs":[{"name":"self"}],"output":{"name":"searchstep"}}],[11,"next_match_back","","",38,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next_back","","",29,{"inputs":[{"name":"self"}],"output":{"name":"searchstep"}}],[11,"next_match_back","","",29,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next_reject_back","","",29,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next_back","","",24,{"inputs":[{"name":"self"}],"output":{"name":"searchstep"}}],[11,"next_match_back","","",24,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"fmt","pwasm_std::str","",20,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",19,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"haystack","pwasm_std::str::pattern","",24,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"next","","",24,{"inputs":[{"name":"self"}],"output":{"name":"searchstep"}}],[11,"next_match","","",24,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"haystack","","",39,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"next","","",39,{"inputs":[{"name":"self"}],"output":{"name":"searchstep"}}],[11,"next_match","","",39,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next_reject","","",39,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"haystack","","",38,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"next","","",38,{"inputs":[{"name":"self"}],"output":{"name":"searchstep"}}],[11,"next_match","","",38,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"haystack","","",29,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"next","","",29,{"inputs":[{"name":"self"}],"output":{"name":"searchstep"}}],[11,"next_match","","",29,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next_reject","","",29,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"fmt","pwasm_std","",17,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"add","","",18,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"string"}}],[11,"eq","","",21,null],[11,"ne","","",21,null],[11,"eq","","",21,null],[11,"ne","","",21,null],[11,"eq","","",18,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"bool"}}],[11,"ne","","",18,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"bool"}}],[11,"eq","","",21,null],[11,"ne","","",21,null],[11,"eq","","",21,null],[11,"ne","","",21,null],[11,"eq","","",21,null],[11,"ne","","",21,null],[11,"eq","","",21,null],[11,"ne","","",21,null],[11,"eq","","",21,null],[11,"ne","","",21,null],[11,"eq","","",21,null],[11,"ne","","",21,null],[11,"eq","","",21,null],[11,"ne","","",21,null],[11,"eq","","",21,null],[11,"ne","","",21,null],[11,"eq","","",21,null],[11,"ne","","",21,null],[11,"eq","","",21,null],[11,"ne","","",21,null],[11,"eq","","",21,null],[11,"ne","","",21,null],[11,"eq","","",21,null],[11,"ne","","",21,null],[11,"eq","","",21,null],[11,"ne","","",21,null],[11,"eq","","",21,null],[11,"ne","","",21,null],[11,"eq","","",21,null],[11,"ne","","",21,null],[11,"eq","","",21,null],[11,"ne","","",21,null],[11,"eq","","",21,null],[11,"ne","","",21,null],[11,"eq","","",18,{"inputs":[{"name":"self"},{"name":"string"}],"output":{"name":"bool"}}],[11,"ne","","",18,{"inputs":[{"name":"self"},{"name":"string"}],"output":{"name":"bool"}}],[11,"eq","","",21,null],[11,"ne","","",21,null],[11,"eq","","",21,null],[11,"ne","","",21,null],[11,"eq","","",21,{"inputs":[{"name":"self"},{"name":"vec"}],"output":{"name":"bool"}}],[11,"ne","","",21,{"inputs":[{"name":"self"},{"name":"vec"}],"output":{"name":"bool"}}],[11,"eq","","",21,null],[11,"ne","","",21,null],[11,"eq","","",21,null],[11,"ne","","",21,null],[11,"eq","","",21,null],[11,"ne","","",21,null],[11,"eq","","",21,null],[11,"ne","","",21,null],[11,"eq","","",21,null],[11,"ne","","",21,null],[11,"eq","","",21,null],[11,"ne","","",21,null],[11,"eq","","",21,null],[11,"ne","","",21,null],[11,"eq","","",21,null],[11,"ne","","",21,null],[11,"eq","","",21,null],[11,"ne","","",21,null],[11,"eq","","",21,null],[11,"ne","","",21,null],[11,"eq","","",21,null],[11,"ne","","",21,null],[11,"eq","","",21,null],[11,"ne","","",21,null],[11,"eq","","",21,null],[11,"ne","","",21,null],[11,"eq","","",21,null],[11,"ne","","",21,null],[11,"eq","","",21,null],[11,"ne","","",21,null],[11,"eq","","",21,null],[11,"ne","","",21,null],[11,"eq","","",21,null],[11,"ne","","",21,null],[11,"eq","","",21,null],[11,"ne","","",21,null],[11,"eq","","",21,null],[11,"ne","","",21,null],[11,"eq","","",21,null],[11,"ne","","",21,null],[11,"eq","","",21,null],[11,"ne","","",21,null],[11,"eq","","",21,null],[11,"ne","","",21,null],[11,"eq","","",18,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"bool"}}],[11,"ne","","",18,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"bool"}}],[11,"eq","","",21,null],[11,"ne","","",21,null],[11,"eq","","",21,null],[11,"ne","","",21,null],[11,"eq","","",21,null],[11,"ne","","",21,null],[11,"eq","","",21,null],[11,"ne","","",21,null],[11,"eq","","",21,null],[11,"ne","","",21,null],[11,"eq","","",21,null],[11,"ne","","",21,null],[11,"eq","","",21,null],[11,"ne","","",21,null],[11,"eq","","",21,null],[11,"ne","","",21,null],[11,"eq","","",21,null],[11,"ne","","",21,null],[11,"eq","","",21,null],[11,"ne","","",21,null],[11,"eq","","",21,null],[11,"ne","","",21,null],[11,"eq","","",18,{"inputs":[{"name":"self"},{"name":"cow"}],"output":{"name":"bool"}}],[11,"ne","","",18,{"inputs":[{"name":"self"},{"name":"cow"}],"output":{"name":"bool"}}],[11,"eq","","",21,null],[11,"ne","","",21,null],[11,"eq","","",21,null],[11,"ne","","",21,null],[11,"eq","","",21,null],[11,"ne","","",21,null],[11,"eq","","",21,null],[11,"ne","","",21,null],[11,"eq","","",21,null],[11,"ne","","",21,null],[11,"eq","","",21,null],[11,"ne","","",21,null],[11,"eq","","",21,null],[11,"ne","","",21,null],[11,"eq","","",21,null],[11,"ne","","",21,null],[11,"eq","","",21,null],[11,"ne","","",21,null],[11,"eq","","",21,null],[11,"ne","","",21,null],[11,"eq","","",21,null],[11,"ne","","",21,null],[11,"eq","","",21,null],[11,"ne","","",21,null],[11,"eq","","",21,null],[11,"ne","","",21,null],[11,"eq","","",21,null],[11,"ne","","",21,null],[11,"eq","","",17,{"inputs":[{"name":"self"},{"name":"box"}],"output":{"name":"bool"}}],[11,"ne","","",17,{"inputs":[{"name":"self"},{"name":"box"}],"output":{"name":"bool"}}],[11,"write_str","","",18,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"generics":["error"],"name":"result"}}],[11,"write_char","","",18,{"inputs":[{"name":"self"},{"name":"char"}],"output":{"generics":["error"],"name":"result"}}],[11,"add_assign","","",18,null],[11,"partial_cmp","","",21,{"inputs":[{"name":"self"},{"name":"vec"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"partial_cmp","","",18,{"inputs":[{"name":"self"},{"name":"string"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"lt","","",18,{"inputs":[{"name":"self"},{"name":"string"}],"output":{"name":"bool"}}],[11,"le","","",18,{"inputs":[{"name":"self"},{"name":"string"}],"output":{"name":"bool"}}],[11,"gt","","",18,{"inputs":[{"name":"self"},{"name":"string"}],"output":{"name":"bool"}}],[11,"ge","","",18,{"inputs":[{"name":"self"},{"name":"string"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",17,{"inputs":[{"name":"self"},{"name":"box"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"lt","","",17,{"inputs":[{"name":"self"},{"name":"box"}],"output":{"name":"bool"}}],[11,"le","","",17,{"inputs":[{"name":"self"},{"name":"box"}],"output":{"name":"bool"}}],[11,"ge","","",17,{"inputs":[{"name":"self"},{"name":"box"}],"output":{"name":"bool"}}],[11,"gt","","",17,{"inputs":[{"name":"self"},{"name":"box"}],"output":{"name":"bool"}}],[11,"finalize","","",17,{"inputs":[{"name":"intermediatebox"}],"output":{"name":"box"}}],[11,"to_string","","",18,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[11,"deref_mut","","",18,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"deref_mut","","",17,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref_mut","","",21,null],[11,"default","","Creates an empty `String`.",18,{"inputs":[],"output":{"name":"string"}}],[11,"default","","",17,{"inputs":[],"output":{"generics":["str"],"name":"box"}}],[11,"default","","Creates a `Box<T>`, with the `Default` value for T.",17,{"inputs":[],"output":{"name":"box"}}],[11,"default","","Creates an empty `Vec<T>`.",21,{"inputs":[],"output":{"name":"vec"}}],[11,"default","","",17,{"inputs":[],"output":{"name":"box"}}],[11,"from_str","","",18,{"inputs":[{"name":"str"}],"output":{"generics":["string","parseerror"],"name":"result"}}],[11,"resume","","",17,{"inputs":[{"name":"self"}],"output":{"name":"generatorstate"}}],[11,"len","","",17,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"is_empty","","",17,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"deref","","",18,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"deref","","",21,null],[11,"deref","","",17,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"hash","","",17,null],[11,"hash","","",18,null],[11,"hash","","",21,null],[11,"drop","","",17,null],[11,"drop","","",21,null],[11,"as_mut","","",17,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"as_mut","","",21,null],[11,"as_mut","","",21,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"into_iter","","Creates a consuming iterator, that is, one that moves each value out of the vector (from start to end). The vector cannot be used after calling this.",21,{"inputs":[{"name":"self"}],"output":{"name":"intoiter"}}],[11,"call_once","","",17,{"inputs":[{"name":"self"},{"name":"a"}],"output":{"name":"r"}}],[11,"call_once","","",17,{"inputs":[{"name":"self"},{"name":"a"}],"output":{"name":"r"}}],[11,"fmt","","",17,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",18,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"extend","","",21,null],[11,"extend","","",18,null],[11,"extend","","",18,null],[11,"extend","","",18,null],[11,"extend","","",21,null],[11,"extend","","",18,null],[11,"extend","","",18,null],[11,"index","","",18,{"inputs":[{"name":"self"},{"generics":["usize"],"name":"range"}],"output":{"name":"str"}}],[11,"index","","",21,null],[11,"index","","",21,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"t"}}],[11,"index","","",21,null],[11,"index","","",18,{"inputs":[{"name":"self"},{"generics":["usize"],"name":"rangeto"}],"output":{"name":"str"}}],[11,"index","","",21,null],[11,"index","","",18,{"inputs":[{"name":"self"},{"name":"rangefull"}],"output":{"name":"str"}}],[11,"index","","",21,null],[11,"index","","",18,{"inputs":[{"name":"self"},{"generics":["usize"],"name":"rangefrom"}],"output":{"name":"str"}}],[11,"index","","",21,null],[11,"index","","",18,{"inputs":[{"name":"self"},{"generics":["usize"],"name":"rangeinclusive"}],"output":{"name":"str"}}],[11,"index","","",21,null],[11,"index","","",18,{"inputs":[{"name":"self"},{"generics":["usize"],"name":"rangetoinclusive"}],"output":{"name":"str"}}],[11,"index_mut","","",18,{"inputs":[{"name":"self"},{"generics":["usize"],"name":"range"}],"output":{"name":"str"}}],[11,"index_mut","","",21,null],[11,"index_mut","","",21,null],[11,"index_mut","","",21,null],[11,"index_mut","","",21,null],[11,"index_mut","","",21,null],[11,"index_mut","","",18,{"inputs":[{"name":"self"},{"generics":["usize"],"name":"rangeto"}],"output":{"name":"str"}}],[11,"index_mut","","",21,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"t"}}],[11,"index_mut","","",21,null],[11,"index_mut","","",18,{"inputs":[{"name":"self"},{"generics":["usize"],"name":"rangefrom"}],"output":{"name":"str"}}],[11,"index_mut","","",18,{"inputs":[{"name":"self"},{"generics":["usize"],"name":"rangeinclusive"}],"output":{"name":"str"}}],[11,"index_mut","","",18,{"inputs":[{"name":"self"},{"generics":["usize"],"name":"rangetoinclusive"}],"output":{"name":"str"}}],[11,"index_mut","","",18,{"inputs":[{"name":"self"},{"name":"rangefull"}],"output":{"name":"str"}}],[11,"next","","",17,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",17,null],[11,"nth","","",17,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"option"}}],[11,"next","pwasm_std::str","",41,{"inputs":[{"name":"self"}],"output":{"generics":["u16"],"name":"option"}}],[11,"size_hint","","",41,null],[11,"borrow","pwasm_std","",18,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"borrow","","",21,null],[11,"borrow","","",17,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"borrow_mut","","",21,null],[11,"borrow_mut","","",17,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"cmp","","",21,{"inputs":[{"name":"self"},{"name":"vec"}],"output":{"name":"ordering"}}],[11,"cmp","","",17,{"inputs":[{"name":"self"},{"name":"box"}],"output":{"name":"ordering"}}],[11,"cmp","","",18,{"inputs":[{"name":"self"},{"name":"string"}],"output":{"name":"ordering"}}],[11,"finish","","",17,{"inputs":[{"name":"self"}],"output":{"name":"u64"}}],[11,"write","","",17,null],[11,"write_u8","","",17,null],[11,"write_u16","","",17,null],[11,"write_u32","","",17,null],[11,"write_u64","","",17,null],[11,"write_u128","","",17,null],[11,"write_usize","","",17,null],[11,"write_i8","","",17,null],[11,"write_i16","","",17,null],[11,"write_i32","","",17,null],[11,"write_i64","","",17,null],[11,"write_i128","","",17,null],[11,"write_isize","","",17,null],[11,"from_iter","","",18,{"inputs":[{"name":"i"}],"output":{"name":"string"}}],[11,"from_iter","","",18,{"inputs":[{"name":"i"}],"output":{"name":"string"}}],[11,"from_iter","","",18,{"inputs":[{"name":"i"}],"output":{"name":"string"}}],[11,"from_iter","","",21,{"inputs":[{"name":"i"}],"output":{"name":"vec"}}],[11,"from_iter","","",18,{"inputs":[{"name":"i"}],"output":{"name":"string"}}],[11,"from_iter","","",18,{"inputs":[{"name":"i"}],"output":{"name":"string"}}],[11,"as_ref","","",21,null],[11,"as_ref","","",18,null],[11,"as_ref","","",18,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"as_ref","","",21,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"as_ref","","",17,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"clone","","",18,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[11,"clone_from","","",18,null],[11,"clone","","Returns a new box with a `clone()` of this box's contents.",17,{"inputs":[{"name":"self"}],"output":{"name":"box"}}],[11,"clone_from","","Copies `source`'s contents into `self` without creating a new allocation.",17,null],[11,"clone","pwasm_std::str","",41,{"inputs":[{"name":"self"}],"output":{"name":"encodeutf16"}}],[11,"clone","pwasm_std","",17,{"inputs":[{"name":"self"}],"output":{"name":"box"}}],[11,"clone","","",17,{"inputs":[{"name":"self"}],"output":{"generics":["str"],"name":"box"}}],[11,"clone","","",21,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"clone_from","","",21,null],[11,"next_back","","",17,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"fmt","pwasm_std::str","",41,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","pwasm_std","",21,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",17,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",18,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"from","","",21,{"inputs":[{"name":"string"}],"output":{"generics":["u8"],"name":"vec"}}],[11,"from","","",17,{"inputs":[{"name":"str"}],"output":{"generics":["str"],"name":"box"}}],[11,"from","","",17,{"inputs":[{"name":"vec"}],"output":{"name":"box"}}],[11,"from","","",18,{"inputs":[{"generics":["str"],"name":"box"}],"output":{"name":"string"}}],[11,"from","","",21,{"inputs":[{"name":"vecdeque"}],"output":{"name":"vec"}}],[11,"from","","",18,{"inputs":[{"generics":["str"],"name":"cow"}],"output":{"name":"string"}}],[11,"from","","",17,null],[11,"from","","",21,{"inputs":[{"name":"cow"}],"output":{"name":"vec"}}],[11,"from","","",17,{"inputs":[{"generics":["str"],"name":"box"}],"output":{"name":"box"}}],[11,"from","","",21,{"inputs":[{"name":"str"}],"output":{"generics":["u8"],"name":"vec"}}],[11,"from","","",18,{"inputs":[{"name":"str"}],"output":{"name":"string"}}],[11,"from","","",21,null],[11,"from","","",21,{"inputs":[{"name":"box"}],"output":{"name":"vec"}}],[11,"from","","",21,{"inputs":[{"name":"binaryheap"}],"output":{"name":"vec"}}],[11,"from","","",21,null],[11,"from","","",17,{"inputs":[{"name":"t"}],"output":{"name":"box"}}],[11,"from","","",17,{"inputs":[{"name":"string"}],"output":{"generics":["str"],"name":"box"}}],[11,"clone","pwasm_std::str","",42,{"inputs":[{"name":"self"}],"output":{"name":"splitwhitespace"}}],[11,"next_back","","",42,{"inputs":[{"name":"self"}],"output":{"generics":["str"],"name":"option"}}],[11,"fmt","","",42,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"next","","",42,{"inputs":[{"name":"self"}],"output":{"generics":["str"],"name":"option"}}],[11,"deref","pwasm_std::hash","",7,null],[11,"deref","","",6,null],[11,"deref","","",8,null],[11,"deref","","",14,null],[11,"deref","","",12,null],[11,"deref","","",9,null],[11,"deref","","",10,null],[11,"deref","","",13,null],[11,"deref","","",11,null],[11,"deref","","",5,null],[11,"bitxor","","",12,null],[11,"bitxor","","",10,null],[11,"bitxor","","",13,null],[11,"bitxor","","",11,null],[11,"bitxor","","",14,null],[11,"bitxor","","",5,null],[11,"bitxor","","",7,null],[11,"bitxor","","",9,null],[11,"bitxor","","",6,null],[11,"bitxor","","",8,null],[11,"clone","","",7,{"inputs":[{"name":"self"}],"output":{"name":"h128"}}],[11,"clone","","",14,{"inputs":[{"name":"self"}],"output":{"name":"h2048"}}],[11,"clone","","",11,{"inputs":[{"name":"self"}],"output":{"name":"h512"}}],[11,"clone","","",6,{"inputs":[{"name":"self"}],"output":{"name":"h64"}}],[11,"clone","","",9,{"inputs":[{"name":"self"}],"output":{"name":"h256"}}],[11,"clone","","",12,{"inputs":[{"name":"self"}],"output":{"name":"h520"}}],[11,"clone","","",8,{"inputs":[{"name":"self"}],"output":{"name":"h160"}}],[11,"clone","","",13,{"inputs":[{"name":"self"}],"output":{"name":"h1024"}}],[11,"clone","","",10,{"inputs":[{"name":"self"}],"output":{"name":"h264"}}],[11,"clone","","",5,{"inputs":[{"name":"self"}],"output":{"name":"h32"}}],[11,"partial_cmp","","",9,{"inputs":[{"name":"self"},{"name":"h256"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"partial_cmp","","",11,{"inputs":[{"name":"self"},{"name":"h512"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"partial_cmp","","",13,{"inputs":[{"name":"self"},{"name":"h1024"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"partial_cmp","","",8,{"inputs":[{"name":"self"},{"name":"h160"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"partial_cmp","","",14,{"inputs":[{"name":"self"},{"name":"h2048"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"partial_cmp","","",7,{"inputs":[{"name":"self"},{"name":"h128"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"partial_cmp","","",10,{"inputs":[{"name":"self"},{"name":"h264"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"partial_cmp","","",6,{"inputs":[{"name":"self"},{"name":"h64"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"partial_cmp","","",5,{"inputs":[{"name":"self"},{"name":"h32"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"partial_cmp","","",12,{"inputs":[{"name":"self"},{"name":"h520"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"as_ref","","",6,null],[11,"as_ref","","",8,null],[11,"as_ref","","",9,null],[11,"as_ref","","",13,null],[11,"as_ref","","",7,null],[11,"as_ref","","",14,null],[11,"as_ref","","",12,null],[11,"as_ref","","",10,null],[11,"as_ref","","",5,null],[11,"as_ref","","",11,null],[11,"fmt","","",5,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",12,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",8,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",11,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",13,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",9,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",7,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",14,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",6,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",10,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"cmp","","",14,{"inputs":[{"name":"self"},{"name":"h2048"}],"output":{"name":"ordering"}}],[11,"cmp","","",13,{"inputs":[{"name":"self"},{"name":"h1024"}],"output":{"name":"ordering"}}],[11,"cmp","","",12,{"inputs":[{"name":"self"},{"name":"h520"}],"output":{"name":"ordering"}}],[11,"cmp","","",7,{"inputs":[{"name":"self"},{"name":"h128"}],"output":{"name":"ordering"}}],[11,"cmp","","",6,{"inputs":[{"name":"self"},{"name":"h64"}],"output":{"name":"ordering"}}],[11,"cmp","","",9,{"inputs":[{"name":"self"},{"name":"h256"}],"output":{"name":"ordering"}}],[11,"cmp","","",5,{"inputs":[{"name":"self"},{"name":"h32"}],"output":{"name":"ordering"}}],[11,"cmp","","",10,{"inputs":[{"name":"self"},{"name":"h264"}],"output":{"name":"ordering"}}],[11,"cmp","","",8,{"inputs":[{"name":"self"},{"name":"h160"}],"output":{"name":"ordering"}}],[11,"cmp","","",11,{"inputs":[{"name":"self"},{"name":"h512"}],"output":{"name":"ordering"}}],[11,"bitand","","",5,null],[11,"bitand","","",9,null],[11,"bitand","","",11,null],[11,"bitand","","",6,null],[11,"bitand","","",14,null],[11,"bitand","","",13,null],[11,"bitand","","",7,null],[11,"bitand","","",10,null],[11,"bitand","","",8,null],[11,"bitand","","",12,null],[11,"eq","","",7,{"inputs":[{"name":"self"},{"name":"h128"}],"output":{"name":"bool"}}],[11,"eq","","",10,{"inputs":[{"name":"self"},{"name":"h264"}],"output":{"name":"bool"}}],[11,"eq","","",14,{"inputs":[{"name":"self"},{"name":"h2048"}],"output":{"name":"bool"}}],[11,"eq","","",8,{"inputs":[{"name":"self"},{"name":"h160"}],"output":{"name":"bool"}}],[11,"eq","","",12,{"inputs":[{"name":"self"},{"name":"h520"}],"output":{"name":"bool"}}],[11,"eq","","",5,{"inputs":[{"name":"self"},{"name":"h32"}],"output":{"name":"bool"}}],[11,"eq","","",11,{"inputs":[{"name":"self"},{"name":"h512"}],"output":{"name":"bool"}}],[11,"eq","","",9,{"inputs":[{"name":"self"},{"name":"h256"}],"output":{"name":"bool"}}],[11,"eq","","",6,{"inputs":[{"name":"self"},{"name":"h64"}],"output":{"name":"bool"}}],[11,"eq","","",13,{"inputs":[{"name":"self"},{"name":"h1024"}],"output":{"name":"bool"}}],[11,"from_str","","",9,{"inputs":[{"name":"str"}],"output":{"generics":["h256","fromhexerror"],"name":"result"}}],[11,"from_str","","",6,{"inputs":[{"name":"str"}],"output":{"generics":["h64","fromhexerror"],"name":"result"}}],[11,"from_str","","",11,{"inputs":[{"name":"str"}],"output":{"generics":["h512","fromhexerror"],"name":"result"}}],[11,"from_str","","",12,{"inputs":[{"name":"str"}],"output":{"generics":["h520","fromhexerror"],"name":"result"}}],[11,"from_str","","",14,{"inputs":[{"name":"str"}],"output":{"generics":["h2048","fromhexerror"],"name":"result"}}],[11,"from_str","","",7,{"inputs":[{"name":"str"}],"output":{"generics":["h128","fromhexerror"],"name":"result"}}],[11,"from_str","","",10,{"inputs":[{"name":"str"}],"output":{"generics":["h264","fromhexerror"],"name":"result"}}],[11,"from_str","","",8,{"inputs":[{"name":"str"}],"output":{"generics":["h160","fromhexerror"],"name":"result"}}],[11,"from_str","","",5,{"inputs":[{"name":"str"}],"output":{"generics":["h32","fromhexerror"],"name":"result"}}],[11,"from_str","","",13,{"inputs":[{"name":"str"}],"output":{"generics":["h1024","fromhexerror"],"name":"result"}}],[11,"as_mut","","",14,null],[11,"as_mut","","",10,null],[11,"as_mut","","",9,null],[11,"as_mut","","",6,null],[11,"as_mut","","",5,null],[11,"as_mut","","",11,null],[11,"as_mut","","",7,null],[11,"as_mut","","",12,null],[11,"as_mut","","",13,null],[11,"as_mut","","",8,null],[11,"hash","","",8,null],[11,"hash","","",7,null],[11,"hash","","",13,null],[11,"hash","","",10,null],[11,"hash","","",14,null],[11,"hash","","",9,null],[11,"hash","","",6,null],[11,"hash","","",5,null],[11,"hash","","",12,null],[11,"hash","","",11,null],[11,"bitor","","",5,null],[11,"bitor","","",10,null],[11,"bitor","","",7,null],[11,"bitor","","",14,null],[11,"bitor","","",6,null],[11,"bitor","","",13,null],[11,"bitor","","",9,null],[11,"bitor","","",11,null],[11,"bitor","","",12,null],[11,"bitor","","",8,null],[11,"default","","",7,{"inputs":[],"output":{"name":"h128"}}],[11,"default","","",6,{"inputs":[],"output":{"name":"h64"}}],[11,"default","","",14,{"inputs":[],"output":{"name":"h2048"}}],[11,"default","","",12,{"inputs":[],"output":{"name":"h520"}}],[11,"default","","",13,{"inputs":[],"output":{"name":"h1024"}}],[11,"default","","",9,{"inputs":[],"output":{"name":"h256"}}],[11,"default","","",5,{"inputs":[],"output":{"name":"h32"}}],[11,"default","","",11,{"inputs":[],"output":{"name":"h512"}}],[11,"default","","",10,{"inputs":[],"output":{"name":"h264"}}],[11,"default","","",8,{"inputs":[],"output":{"name":"h160"}}],[11,"deref_mut","","",8,null],[11,"deref_mut","","",13,null],[11,"deref_mut","","",11,null],[11,"deref_mut","","",14,null],[11,"deref_mut","","",5,null],[11,"deref_mut","","",9,null],[11,"deref_mut","","",6,null],[11,"deref_mut","","",10,null],[11,"deref_mut","","",7,null],[11,"deref_mut","","",12,null],[11,"from","","",6,null],[11,"from","","",5,null],[11,"from","","",10,null],[11,"from","","",7,{"inputs":[{"name":"str"}],"output":{"name":"h128"}}],[11,"from","","",7,null],[11,"from","","",11,null],[11,"from","","",13,null],[11,"from","","",8,{"inputs":[{"name":"str"}],"output":{"name":"h160"}}],[11,"from","","",8,{"inputs":[{"name":"h256"}],"output":{"name":"h160"}}],[11,"from","","",10,{"inputs":[{"name":"u64"}],"output":{"name":"h264"}}],[11,"from","","",9,{"inputs":[{"name":"u256"}],"output":{"name":"h256"}}],[11,"from","","",7,null],[11,"from","","",12,null],[11,"from","","",14,{"inputs":[{"name":"str"}],"output":{"name":"h2048"}}],[11,"from","","",5,{"inputs":[{"name":"u64"}],"output":{"name":"h32"}}],[11,"from","","",6,{"inputs":[{"name":"u64"}],"output":{"name":"h64"}}],[11,"from","","",5,null],[11,"from","","",6,null],[11,"from","","",9,{"inputs":[{"name":"str"}],"output":{"name":"h256"}}],[11,"from","","",12,null],[11,"from","","",12,{"inputs":[{"name":"str"}],"output":{"name":"h520"}}],[11,"from","","",11,null],[11,"from","","",7,{"inputs":[{"name":"u64"}],"output":{"name":"h128"}}],[11,"from","","",11,{"inputs":[{"name":"str"}],"output":{"name":"h512"}}],[11,"from","","",10,null],[11,"from","","",9,null],[11,"from","","",9,{"inputs":[{"name":"u64"}],"output":{"name":"h256"}}],[11,"from","","",13,null],[11,"from","","",8,null],[11,"from","","",9,{"inputs":[{"name":"u256"}],"output":{"name":"h256"}}],[11,"from","","",10,{"inputs":[{"name":"str"}],"output":{"name":"h264"}}],[11,"from","","",6,{"inputs":[{"name":"h256"}],"output":{"name":"h64"}}],[11,"from","","",8,{"inputs":[{"name":"u64"}],"output":{"name":"h160"}}],[11,"from","","",8,null],[11,"from","","",6,{"inputs":[{"name":"str"}],"output":{"name":"h64"}}],[11,"from","","",13,{"inputs":[{"name":"u64"}],"output":{"name":"h1024"}}],[11,"from","","",11,{"inputs":[{"name":"u64"}],"output":{"name":"h512"}}],[11,"from","","",9,null],[11,"from","","",13,{"inputs":[{"name":"str"}],"output":{"name":"h1024"}}],[11,"from","","",12,{"inputs":[{"name":"u64"}],"output":{"name":"h520"}}],[11,"from","","",9,{"inputs":[{"name":"h160"}],"output":{"name":"h256"}}],[11,"from","","",14,null],[11,"from","","",5,{"inputs":[{"name":"str"}],"output":{"name":"h32"}}],[11,"from","","",9,{"inputs":[{"name":"h160"}],"output":{"name":"h256"}}],[11,"from","","",14,null],[11,"from","","",14,{"inputs":[{"name":"u64"}],"output":{"name":"h2048"}}],[11,"fmt","","",9,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",11,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",10,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",5,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",14,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",13,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",8,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",6,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",12,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",7,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"index_mut","","",8,null],[11,"index_mut","","",14,null],[11,"index_mut","","",9,null],[11,"index_mut","","",5,null],[11,"index_mut","","",12,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"u8"}}],[11,"index_mut","","",13,null],[11,"index_mut","","",10,null],[11,"index_mut","","",9,null],[11,"index_mut","","",7,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"u8"}}],[11,"index_mut","","",11,null],[11,"index_mut","","",7,null],[11,"index_mut","","",13,null],[11,"index_mut","","",5,null],[11,"index_mut","","",6,null],[11,"index_mut","","",7,null],[11,"index_mut","","",13,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"u8"}}],[11,"index_mut","","",12,null],[11,"index_mut","","",8,null],[11,"index_mut","","",11,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"u8"}}],[11,"index_mut","","",5,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"u8"}}],[11,"index_mut","","",12,null],[11,"index_mut","","",9,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"u8"}}],[11,"index_mut","","",14,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"u8"}}],[11,"index_mut","","",6,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"u8"}}],[11,"index_mut","","",10,null],[11,"index_mut","","",6,null],[11,"index_mut","","",10,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"u8"}}],[11,"index_mut","","",8,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"u8"}}],[11,"index_mut","","",11,null],[11,"index_mut","","",14,null],[11,"index","","",12,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"u8"}}],[11,"index","","",8,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"u8"}}],[11,"index","","",6,null],[11,"index","","",14,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"u8"}}],[11,"index","","",10,null],[11,"index","","",14,null],[11,"index","","",7,null],[11,"index","","",8,null],[11,"index","","",5,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"u8"}}],[11,"index","","",14,null],[11,"index","","",9,null],[11,"index","","",13,null],[11,"index","","",10,null],[11,"index","","",11,null],[11,"index","","",7,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"u8"}}],[11,"index","","",11,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"u8"}}],[11,"index","","",12,null],[11,"index","","",5,null],[11,"index","","",6,null],[11,"index","","",12,null],[11,"index","","",9,null],[11,"index","","",10,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"u8"}}],[11,"index","","",11,null],[11,"index","","",5,null],[11,"index","","",13,null],[11,"index","","",13,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"u8"}}],[11,"index","","",9,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"u8"}}],[11,"index","","",7,null],[11,"index","","",8,null],[11,"index","","",6,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"u8"}}],[11,"new","pwasm_std","Creates a new empty `String`.",18,{"inputs":[],"output":{"name":"string"}}],[11,"with_capacity","","Creates a new empty `String` with a particular capacity.",18,{"inputs":[{"name":"usize"}],"output":{"name":"string"}}],[11,"from_utf8","","Converts a vector of bytes to a `String`.",18,{"inputs":[{"generics":["u8"],"name":"vec"}],"output":{"generics":["string","fromutf8error"],"name":"result"}}],[11,"from_utf8_lossy","","Converts a slice of bytes to a string, including invalid characters.",18,null],[11,"from_utf16","","Decode a UTF-16 encoded vector `v` into a `String`, returning [`Err`] if `v` contains any invalid data.",18,null],[11,"from_utf16_lossy","","Decode a UTF-16 encoded slice `v` into a `String`, replacing invalid data with the replacement character (U+FFFD).",18,null],[11,"from_raw_parts","","Creates a new `String` from a length, capacity, and pointer.",18,null],[11,"from_utf8_unchecked","","Converts a vector of bytes to a `String` without checking that the string contains valid UTF-8.",18,{"inputs":[{"generics":["u8"],"name":"vec"}],"output":{"name":"string"}}],[11,"into_bytes","","Converts a `String` into a byte vector.",18,{"inputs":[{"name":"self"}],"output":{"generics":["u8"],"name":"vec"}}],[11,"as_str","","Extracts a string slice containing the entire string.",18,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"as_mut_str","","Converts a `String` into a mutable string slice.",18,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"push_str","","Appends a given string slice onto the end of this `String`.",18,null],[11,"capacity","","Returns this `String`'s capacity, in bytes.",18,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"reserve","","Ensures that this `String`'s capacity is at least `additional` bytes larger than its length.",18,null],[11,"reserve_exact","","Ensures that this `String`'s capacity is `additional` bytes larger than its length.",18,null],[11,"shrink_to_fit","","Shrinks the capacity of this `String` to match its length.",18,null],[11,"push","","Appends the given [`char`] to the end of this `String`.",18,null],[11,"as_bytes","","Returns a byte slice of this `String`'s contents.",18,null],[11,"truncate","","Shortens this `String` to the specified length.",18,null],[11,"pop","","Removes the last character from the string buffer and returns it.",18,{"inputs":[{"name":"self"}],"output":{"generics":["char"],"name":"option"}}],[11,"remove","","Removes a [`char`] from this `String` at a byte position and returns it.",18,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"char"}}],[11,"retain","","Retains only the characters specified by the predicate.",18,null],[11,"insert","","Inserts a character into this `String` at a byte position.",18,null],[11,"insert_str","","Inserts a string slice into this `String` at a byte position.",18,null],[11,"as_mut_vec","","Returns a mutable reference to the contents of this `String`.",18,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"len","","Returns the length of this `String`, in bytes.",18,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"is_empty","","Returns `true` if this `String` has a length of zero.",18,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"split_off","","Splits the string into two at the given index.",18,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"string"}}],[11,"clear","","Truncates this `String`, removing all contents.",18,null],[11,"drain","","Creates a draining iterator that removes the specified range in the string and yields the removed chars.",18,{"inputs":[{"name":"self"},{"name":"r"}],"output":{"name":"drain"}}],[11,"splice","","Creates a splicing iterator that removes the specified range in the string, and replaces it with the given string. The given string doesn't need to be the same length as the range.",18,null],[11,"into_boxed_str","","Converts this `String` into a [`Box`]`<`[`str`]`>`.",18,{"inputs":[{"name":"self"}],"output":{"generics":["str"],"name":"box"}}],[11,"as_str","pwasm_std::str","View the underlying data as a subslice of the original data.",28,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"as_str","","View the underlying data as a subslice of the original data.",32,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"valid_up_to","","Returns the index in the given string up to which valid UTF-8 was verified.",19,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"error_len","","Provide more information about the failure:",19,{"inputs":[{"name":"self"}],"output":{"generics":["usize"],"name":"option"}}],[11,"new","pwasm_std","Constructs a new, empty `Vec<T>`.",21,{"inputs":[],"output":{"name":"vec"}}],[11,"with_capacity","","Constructs a new, empty `Vec<T>` with the specified capacity.",21,{"inputs":[{"name":"usize"}],"output":{"name":"vec"}}],[11,"from_raw_parts","","Creates a `Vec<T>` directly from the raw components of another vector.",21,null],[11,"capacity","","Returns the number of elements the vector can hold without reallocating.",21,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"reserve","","Reserves capacity for at least `additional` more elements to be inserted in the given `Vec<T>`. The collection may reserve more space to avoid frequent reallocations. After calling `reserve`, capacity will be greater than or equal to `self.len() + additional`. Does nothing if capacity is already sufficient.",21,null],[11,"reserve_exact","","Reserves the minimum capacity for exactly `additional` more elements to be inserted in the given `Vec<T>`. After calling `reserve_exact`, capacity will be greater than or equal to `self.len() + additional`. Does nothing if the capacity is already sufficient.",21,null],[11,"shrink_to_fit","","Shrinks the capacity of the vector as much as possible.",21,null],[11,"into_boxed_slice","","Converts the vector into [`Box<[T]>`][owned slice].",21,{"inputs":[{"name":"self"}],"output":{"name":"box"}}],[11,"truncate","","Shortens the vector, keeping the first `len` elements and dropping the rest.",21,null],[11,"as_slice","","Extracts a slice containing the entire vector.",21,null],[11,"as_mut_slice","","Extracts a mutable slice of the entire vector.",21,null],[11,"set_len","","Sets the length of a vector.",21,null],[11,"swap_remove","","Removes an element from the vector and returns it.",21,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"t"}}],[11,"insert","","Inserts an element at position `index` within the vector, shifting all elements after it to the right.",21,null],[11,"remove","","Removes and returns the element at position `index` within the vector, shifting all elements after it to the left.",21,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"t"}}],[11,"retain","","Retains only the elements specified by the predicate.",21,null],[11,"dedup_by_key","","Removes all but the first of consecutive elements in the vector that resolve to the same key.",21,null],[11,"dedup_by","","Removes all but the first of consecutive elements in the vector satisfying a given equality relation.",21,null],[11,"push","","Appends an element to the back of a collection.",21,null],[11,"place_back","","Returns a place for insertion at the back of the `Vec`.",21,{"inputs":[{"name":"self"}],"output":{"name":"placeback"}}],[11,"pop","","Removes the last element from a vector and returns it, or [`None`] if it is empty.",21,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"append","","Moves all the elements of `other` into `Self`, leaving `other` empty.",21,null],[11,"drain","","Creates a draining iterator that removes the specified range in the vector and yields the removed items.",21,{"inputs":[{"name":"self"},{"name":"r"}],"output":{"name":"drain"}}],[11,"clear","","Clears the vector, removing all values.",21,null],[11,"len","","Returns the number of elements in the vector, also referred to as its 'length'.",21,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"is_empty","","Returns `true` if the vector contains no elements.",21,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"split_off","","Splits the collection into two at the given index.",21,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"vec"}}],[11,"resize","","Resizes the `Vec` in-place so that `len` is equal to `new_len`.",21,null],[11,"extend_from_slice","","Clones and appends all elements in a slice to the `Vec`.",21,null],[11,"resize_default","","Resizes the `Vec` in-place so that `len` is equal to `new_len`.",21,null],[11,"dedup","","Removes consecutive repeated elements in the vector.",21,null],[11,"remove_item","","Removes the first instance of `item` from the vector if the item exists.",21,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"option"}}],[11,"splice","","Creates a splicing iterator that replaces the specified range in the vector with the given `replace_with` iterator and yields the removed items. `replace_with` does not need to be the same length as `range`.",21,{"inputs":[{"name":"self"},{"name":"r"},{"name":"i"}],"output":{"name":"splice"}}],[11,"drain_filter","","Creates an iterator which uses a closure to determine if an element should be removed.",21,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"drainfilter"}}],[11,"new","pwasm_std::hash","Create a new, zero-initialised, instance.",5,{"inputs":[],"output":{"name":"h32"}}],[11,"zero","","Synonym for `new()`. Prefer to new as it's more readable.",5,{"inputs":[],"output":{"name":"h32"}}],[11,"len","","Get the size of this object in bytes.",5,{"inputs":[],"output":{"name":"usize"}}],[11,"as_ptr","","Returns a constant raw pointer to the value",5,null],[11,"as_mut_ptr","","Returns a mutable raw pointer to the value",5,null],[11,"clone_from_slice","","Assign self to be of the same value as a slice of bytes of length `len()`.",5,null],[11,"from_slice","","Convert a slice of bytes of length `len()` to an instance of this type.",5,null],[11,"copy_to","","Copy the data of this object into some mutable slice of length `len()`.",5,null],[11,"contains","","Returns `true` if all bits set in `b` are also set in `self`.",5,{"inputs":[{"name":"self"},{"name":"h32"}],"output":{"name":"bool"}}],[11,"is_zero","","Returns `true` if no bits are set.",5,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"low_u64","","Returns the lowest 8 bytes interpreted as a BigEndian integer.",5,{"inputs":[{"name":"self"}],"output":{"name":"u64"}}],[11,"hex","","Get a hex representation.",5,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[11,"new","","Create a new, zero-initialised, instance.",6,{"inputs":[],"output":{"name":"h64"}}],[11,"zero","","Synonym for `new()`. Prefer to new as it's more readable.",6,{"inputs":[],"output":{"name":"h64"}}],[11,"len","","Get the size of this object in bytes.",6,{"inputs":[],"output":{"name":"usize"}}],[11,"as_ptr","","Returns a constant raw pointer to the value",6,null],[11,"as_mut_ptr","","Returns a mutable raw pointer to the value",6,null],[11,"clone_from_slice","","Assign self to be of the same value as a slice of bytes of length `len()`.",6,null],[11,"from_slice","","Convert a slice of bytes of length `len()` to an instance of this type.",6,null],[11,"copy_to","","Copy the data of this object into some mutable slice of length `len()`.",6,null],[11,"contains","","Returns `true` if all bits set in `b` are also set in `self`.",6,{"inputs":[{"name":"self"},{"name":"h64"}],"output":{"name":"bool"}}],[11,"is_zero","","Returns `true` if no bits are set.",6,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"low_u64","","Returns the lowest 8 bytes interpreted as a BigEndian integer.",6,{"inputs":[{"name":"self"}],"output":{"name":"u64"}}],[11,"hex","","Get a hex representation.",6,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[11,"new","","Create a new, zero-initialised, instance.",7,{"inputs":[],"output":{"name":"h128"}}],[11,"zero","","Synonym for `new()`. Prefer to new as it's more readable.",7,{"inputs":[],"output":{"name":"h128"}}],[11,"len","","Get the size of this object in bytes.",7,{"inputs":[],"output":{"name":"usize"}}],[11,"as_ptr","","Returns a constant raw pointer to the value",7,null],[11,"as_mut_ptr","","Returns a mutable raw pointer to the value",7,null],[11,"clone_from_slice","","Assign self to be of the same value as a slice of bytes of length `len()`.",7,null],[11,"from_slice","","Convert a slice of bytes of length `len()` to an instance of this type.",7,null],[11,"copy_to","","Copy the data of this object into some mutable slice of length `len()`.",7,null],[11,"contains","","Returns `true` if all bits set in `b` are also set in `self`.",7,{"inputs":[{"name":"self"},{"name":"h128"}],"output":{"name":"bool"}}],[11,"is_zero","","Returns `true` if no bits are set.",7,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"low_u64","","Returns the lowest 8 bytes interpreted as a BigEndian integer.",7,{"inputs":[{"name":"self"}],"output":{"name":"u64"}}],[11,"hex","","Get a hex representation.",7,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[11,"new","","Create a new, zero-initialised, instance.",8,{"inputs":[],"output":{"name":"h160"}}],[11,"zero","","Synonym for `new()`. Prefer to new as it's more readable.",8,{"inputs":[],"output":{"name":"h160"}}],[11,"len","","Get the size of this object in bytes.",8,{"inputs":[],"output":{"name":"usize"}}],[11,"as_ptr","","Returns a constant raw pointer to the value",8,null],[11,"as_mut_ptr","","Returns a mutable raw pointer to the value",8,null],[11,"clone_from_slice","","Assign self to be of the same value as a slice of bytes of length `len()`.",8,null],[11,"from_slice","","Convert a slice of bytes of length `len()` to an instance of this type.",8,null],[11,"copy_to","","Copy the data of this object into some mutable slice of length `len()`.",8,null],[11,"contains","","Returns `true` if all bits set in `b` are also set in `self`.",8,{"inputs":[{"name":"self"},{"name":"h160"}],"output":{"name":"bool"}}],[11,"is_zero","","Returns `true` if no bits are set.",8,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"low_u64","","Returns the lowest 8 bytes interpreted as a BigEndian integer.",8,{"inputs":[{"name":"self"}],"output":{"name":"u64"}}],[11,"hex","","Get a hex representation.",8,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[11,"new","","Create a new, zero-initialised, instance.",9,{"inputs":[],"output":{"name":"h256"}}],[11,"zero","","Synonym for `new()`. Prefer to new as it's more readable.",9,{"inputs":[],"output":{"name":"h256"}}],[11,"len","","Get the size of this object in bytes.",9,{"inputs":[],"output":{"name":"usize"}}],[11,"as_ptr","","Returns a constant raw pointer to the value",9,null],[11,"as_mut_ptr","","Returns a mutable raw pointer to the value",9,null],[11,"clone_from_slice","","Assign self to be of the same value as a slice of bytes of length `len()`.",9,null],[11,"from_slice","","Convert a slice of bytes of length `len()` to an instance of this type.",9,null],[11,"copy_to","","Copy the data of this object into some mutable slice of length `len()`.",9,null],[11,"contains","","Returns `true` if all bits set in `b` are also set in `self`.",9,{"inputs":[{"name":"self"},{"name":"h256"}],"output":{"name":"bool"}}],[11,"is_zero","","Returns `true` if no bits are set.",9,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"low_u64","","Returns the lowest 8 bytes interpreted as a BigEndian integer.",9,{"inputs":[{"name":"self"}],"output":{"name":"u64"}}],[11,"hex","","Get a hex representation.",9,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[11,"new","","Create a new, zero-initialised, instance.",10,{"inputs":[],"output":{"name":"h264"}}],[11,"zero","","Synonym for `new()`. Prefer to new as it's more readable.",10,{"inputs":[],"output":{"name":"h264"}}],[11,"len","","Get the size of this object in bytes.",10,{"inputs":[],"output":{"name":"usize"}}],[11,"as_ptr","","Returns a constant raw pointer to the value",10,null],[11,"as_mut_ptr","","Returns a mutable raw pointer to the value",10,null],[11,"clone_from_slice","","Assign self to be of the same value as a slice of bytes of length `len()`.",10,null],[11,"from_slice","","Convert a slice of bytes of length `len()` to an instance of this type.",10,null],[11,"copy_to","","Copy the data of this object into some mutable slice of length `len()`.",10,null],[11,"contains","","Returns `true` if all bits set in `b` are also set in `self`.",10,{"inputs":[{"name":"self"},{"name":"h264"}],"output":{"name":"bool"}}],[11,"is_zero","","Returns `true` if no bits are set.",10,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"low_u64","","Returns the lowest 8 bytes interpreted as a BigEndian integer.",10,{"inputs":[{"name":"self"}],"output":{"name":"u64"}}],[11,"hex","","Get a hex representation.",10,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[11,"new","","Create a new, zero-initialised, instance.",11,{"inputs":[],"output":{"name":"h512"}}],[11,"zero","","Synonym for `new()`. Prefer to new as it's more readable.",11,{"inputs":[],"output":{"name":"h512"}}],[11,"len","","Get the size of this object in bytes.",11,{"inputs":[],"output":{"name":"usize"}}],[11,"as_ptr","","Returns a constant raw pointer to the value",11,null],[11,"as_mut_ptr","","Returns a mutable raw pointer to the value",11,null],[11,"clone_from_slice","","Assign self to be of the same value as a slice of bytes of length `len()`.",11,null],[11,"from_slice","","Convert a slice of bytes of length `len()` to an instance of this type.",11,null],[11,"copy_to","","Copy the data of this object into some mutable slice of length `len()`.",11,null],[11,"contains","","Returns `true` if all bits set in `b` are also set in `self`.",11,{"inputs":[{"name":"self"},{"name":"h512"}],"output":{"name":"bool"}}],[11,"is_zero","","Returns `true` if no bits are set.",11,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"low_u64","","Returns the lowest 8 bytes interpreted as a BigEndian integer.",11,{"inputs":[{"name":"self"}],"output":{"name":"u64"}}],[11,"hex","","Get a hex representation.",11,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[11,"new","","Create a new, zero-initialised, instance.",12,{"inputs":[],"output":{"name":"h520"}}],[11,"zero","","Synonym for `new()`. Prefer to new as it's more readable.",12,{"inputs":[],"output":{"name":"h520"}}],[11,"len","","Get the size of this object in bytes.",12,{"inputs":[],"output":{"name":"usize"}}],[11,"as_ptr","","Returns a constant raw pointer to the value",12,null],[11,"as_mut_ptr","","Returns a mutable raw pointer to the value",12,null],[11,"clone_from_slice","","Assign self to be of the same value as a slice of bytes of length `len()`.",12,null],[11,"from_slice","","Convert a slice of bytes of length `len()` to an instance of this type.",12,null],[11,"copy_to","","Copy the data of this object into some mutable slice of length `len()`.",12,null],[11,"contains","","Returns `true` if all bits set in `b` are also set in `self`.",12,{"inputs":[{"name":"self"},{"name":"h520"}],"output":{"name":"bool"}}],[11,"is_zero","","Returns `true` if no bits are set.",12,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"low_u64","","Returns the lowest 8 bytes interpreted as a BigEndian integer.",12,{"inputs":[{"name":"self"}],"output":{"name":"u64"}}],[11,"hex","","Get a hex representation.",12,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[11,"new","","Create a new, zero-initialised, instance.",13,{"inputs":[],"output":{"name":"h1024"}}],[11,"zero","","Synonym for `new()`. Prefer to new as it's more readable.",13,{"inputs":[],"output":{"name":"h1024"}}],[11,"len","","Get the size of this object in bytes.",13,{"inputs":[],"output":{"name":"usize"}}],[11,"as_ptr","","Returns a constant raw pointer to the value",13,null],[11,"as_mut_ptr","","Returns a mutable raw pointer to the value",13,null],[11,"clone_from_slice","","Assign self to be of the same value as a slice of bytes of length `len()`.",13,null],[11,"from_slice","","Convert a slice of bytes of length `len()` to an instance of this type.",13,null],[11,"copy_to","","Copy the data of this object into some mutable slice of length `len()`.",13,null],[11,"contains","","Returns `true` if all bits set in `b` are also set in `self`.",13,{"inputs":[{"name":"self"},{"name":"h1024"}],"output":{"name":"bool"}}],[11,"is_zero","","Returns `true` if no bits are set.",13,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"low_u64","","Returns the lowest 8 bytes interpreted as a BigEndian integer.",13,{"inputs":[{"name":"self"}],"output":{"name":"u64"}}],[11,"hex","","Get a hex representation.",13,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[11,"new","","Create a new, zero-initialised, instance.",14,{"inputs":[],"output":{"name":"h2048"}}],[11,"zero","","Synonym for `new()`. Prefer to new as it's more readable.",14,{"inputs":[],"output":{"name":"h2048"}}],[11,"len","","Get the size of this object in bytes.",14,{"inputs":[],"output":{"name":"usize"}}],[11,"as_ptr","","Returns a constant raw pointer to the value",14,null],[11,"as_mut_ptr","","Returns a mutable raw pointer to the value",14,null],[11,"clone_from_slice","","Assign self to be of the same value as a slice of bytes of length `len()`.",14,null],[11,"from_slice","","Convert a slice of bytes of length `len()` to an instance of this type.",14,null],[11,"copy_to","","Copy the data of this object into some mutable slice of length `len()`.",14,null],[11,"contains","","Returns `true` if all bits set in `b` are also set in `self`.",14,{"inputs":[{"name":"self"},{"name":"h2048"}],"output":{"name":"bool"}}],[11,"is_zero","","Returns `true` if no bits are set.",14,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"low_u64","","Returns the lowest 8 bytes interpreted as a BigEndian integer.",14,{"inputs":[{"name":"self"}],"output":{"name":"u64"}}],[11,"hex","","Get a hex representation.",14,{"inputs":[{"name":"self"}],"output":{"name":"string"}}]],"paths":[[8,"FromStr"],[8,"Pattern"],[4,"SearchStep"],[8,"Searcher"],[8,"ReverseSearcher"],[3,"H32"],[3,"H64"],[3,"H128"],[3,"H160"],[3,"H256"],[3,"H264"],[3,"H512"],[3,"H520"],[3,"H1024"],[3,"H2048"],[3,"WrappedArgs"],[3,"WrappedResult"],[3,"Box"],[3,"String"],[3,"Utf8Error"],[3,"ParseBoolError"],[3,"Vec"],[3,"MatchIndices"],[3,"RSplitN"],[3,"CharSearcher"],[3,"SplitN"],[3,"Lines"],[3,"Split"],[3,"Chars"],[3,"CharSliceSearcher"],[3,"LinesAny"],[3,"RSplit"],[3,"CharIndices"],[3,"Bytes"],[3,"RMatches"],[3,"Matches"],[3,"RMatchIndices"],[3,"RSplitTerminator"],[3,"StrSearcher"],[3,"CharPredicateSearcher"],[3,"SplitTerminator"],[3,"EncodeUtf16"],[3,"SplitWhitespace"]]};
searchIndex["pwasm_test"] = {"doc":"`pwasm_ethereum` test lib","items":[[3,"Endpoint","pwasm_test","A fake contract endpoint Endpoint is just a closure which receives `value: U256`, `input: &[u8]`, `output: &mut [u8]` and returns `Ok(())` if call was successfull or `Err(Error)` otherwise",null,null],[3,"ExternalBuilder","","A builder for quick creation of External impls for testing.",null,null],[5,"ext_reset","","Allows to mock `pwasm_ethereum::*` calls",null,{"inputs":[{"name":"f"}],"output":null}],[5,"ext_update","","Updates `pwasm_ethereum::*` mocks",null,{"inputs":[{"name":"f"}],"output":null}],[11,"new","","",0,{"inputs":[{"generics":["fnmut"],"name":"box"}],"output":{"name":"endpoint"}}],[11,"ok","","",0,{"inputs":[],"output":{"name":"endpoint"}}],[11,"err","","",0,{"inputs":[],"output":{"name":"endpoint"}}],[11,"from","","",0,{"inputs":[{"name":"t"}],"output":{"name":"endpoint"}}],[11,"new","","Begin build process",1,{"inputs":[],"output":{"name":"self"}}],[11,"endpoint","","Sets Endpoint closure to prosess `pwasm_ethereum::call` to some Address",1,{"inputs":[{"name":"self"},{"name":"address"},{"name":"endpoint"}],"output":{"name":"self"}}],[11,"storage","","Sets storage value for some `key`",1,null],[11,"balance_of","","Sets `pwasm_ethereum::balance()` for some address",1,{"inputs":[{"name":"self"},{"name":"address"},{"name":"u256"}],"output":{"name":"self"}}],[11,"sender","","Sets `pwasm_ethereum::sender()`",1,{"inputs":[{"name":"self"},{"name":"address"}],"output":{"name":"self"}}],[11,"coinbase","","Sets `pwasm_ethereum::coinbase()`",1,{"inputs":[{"name":"self"},{"name":"address"}],"output":{"name":"self"}}],[11,"timestamp","","Sets `pwasm_ethereum::timestamp()`",1,{"inputs":[{"name":"self"},{"name":"u64"}],"output":{"name":"self"}}],[11,"blocknumber","","Sets `pwasm_ethereum::block_number()`",1,{"inputs":[{"name":"self"},{"name":"u64"}],"output":{"name":"self"}}],[11,"difficulty","","Sets `pwasm_ethereum::difficulty()`",1,{"inputs":[{"name":"self"},{"name":"u256"}],"output":{"name":"self"}}],[11,"gas_limit","","Sets `pwasm_ethereum::gas_limit()`",1,{"inputs":[{"name":"self"},{"name":"u256"}],"output":{"name":"self"}}],[11,"origin","","Sets `pwasm_ethereum::origin()`",1,{"inputs":[{"name":"self"},{"name":"address"}],"output":{"name":"self"}}],[11,"value","","Sets `pwasm_ethereum::value()`",1,{"inputs":[{"name":"self"},{"name":"u256"}],"output":{"name":"self"}}],[11,"address","","Sets `pwasm_ethereum::address()`",1,{"inputs":[{"name":"self"},{"name":"address"}],"output":{"name":"self"}}],[11,"build","","Builds ExternalInstance from ExternalBuilder",1,{"inputs":[{"name":"self"}],"output":{"name":"externalinstance"}}],[11,"from_instance","","Restores ExternalBuilder from ExternalInstance",1,{"inputs":[{"name":"externalinstance"}],"output":{"name":"externalbuilder"}}],[14,"test_with_external","","Test with provided externals manager (`impl ::pwasm_test::External`)",null,null]],"paths":[[3,"Endpoint"],[3,"ExternalBuilder"]]};
searchIndex["rustc_hex"] = {"doc":"Hex binary-to-text encoding","items":[[4,"FromHexError","rustc_hex","Errors that can occur when decoding a hex encoded string",null,null],[13,"InvalidHexCharacter","","The input contained a character not part of the hex format",0,null],[13,"InvalidHexLength","","The input had an invalid length",0,null],[8,"ToHex","","A trait for converting a value to hexadecimal encoding",null,null],[10,"to_hex","","Converts the value of `self` to a hex value, returning the owned string.",1,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[8,"FromHex","","A trait for converting hexadecimal encoded values",null,null],[10,"from_hex","","Converts the value of `self`, interpreted as hexadecimal encoded data, into an owned vector of bytes, returning the vector.",2,{"inputs":[{"name":"self"}],"output":{"generics":["vec","fromhexerror"],"name":"result"}}],[11,"clone","","",0,{"inputs":[{"name":"self"}],"output":{"name":"fromhexerror"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",0,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}]],"paths":[[4,"FromHexError"],[8,"ToHex"],[8,"FromHex"]]};
searchIndex["tiny_keccak"] = {"doc":"An implementation of the FIPS-202-defined SHA-3 and SHAKE functions.","items":[[3,"Keccak","tiny_keccak","This structure should be used to create keccak/sha3 hash.",null,null],[3,"XofReader","","",null,null],[5,"keccakf","","keccak-f[1600]",null,null],[5,"shake128","","",null,null],[5,"shake256","","",null,null],[5,"keccak224","","",null,null],[5,"keccak256","","",null,null],[5,"keccak384","","",null,null],[5,"keccak512","","",null,null],[5,"sha3_224","","",null,null],[5,"sha3_256","","",null,null],[5,"sha3_384","","",null,null],[5,"sha3_512","","",null,null],[11,"clone","","",0,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"new","","",0,{"inputs":[{"name":"usize"},{"name":"u8"}],"output":{"name":"keccak"}}],[11,"new_shake128","","",0,{"inputs":[],"output":{"name":"keccak"}}],[11,"shake128","","",0,null],[11,"new_shake256","","",0,{"inputs":[],"output":{"name":"keccak"}}],[11,"shake256","","",0,null],[11,"new_keccak224","","",0,{"inputs":[],"output":{"name":"keccak"}}],[11,"keccak224","","",0,null],[11,"new_keccak256","","",0,{"inputs":[],"output":{"name":"keccak"}}],[11,"keccak256","","",0,null],[11,"new_keccak384","","",0,{"inputs":[],"output":{"name":"keccak"}}],[11,"keccak384","","",0,null],[11,"new_keccak512","","",0,{"inputs":[],"output":{"name":"keccak"}}],[11,"keccak512","","",0,null],[11,"new_sha3_224","","",0,{"inputs":[],"output":{"name":"keccak"}}],[11,"sha3_224","","",0,null],[11,"new_sha3_256","","",0,{"inputs":[],"output":{"name":"keccak"}}],[11,"sha3_256","","",0,null],[11,"new_sha3_384","","",0,{"inputs":[],"output":{"name":"keccak"}}],[11,"sha3_384","","",0,null],[11,"new_sha3_512","","",0,{"inputs":[],"output":{"name":"keccak"}}],[11,"sha3_512","","",0,null],[11,"update","","",0,null],[11,"keccakf","","",0,{"inputs":[{"name":"self"}],"output":null}],[11,"finalize","","",0,null],[11,"absorb","","",0,null],[11,"pad","","",0,{"inputs":[{"name":"self"}],"output":null}],[11,"fill_block","","",0,{"inputs":[{"name":"self"}],"output":null}],[11,"squeeze","","",0,null],[11,"xof","","",0,{"inputs":[{"name":"self"}],"output":{"name":"xofreader"}}],[11,"squeeze","","",1,null]],"paths":[[3,"Keccak"],[3,"XofReader"]]};
initSearch(searchIndex);
